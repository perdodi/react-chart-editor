{"version":3,"sources":["../../src/lib/multiValues.js"],"names":["deepCopyPublic","value","skipPrivateKeys","key","startsWith","window","JSON","parse","stringify","setMultiValuedContainer","intoObj","fromObj","config","intoVal","fromVal","charAt","MULTI_VALUED","String","Array","isArray","searchArrays","i","length","Error","Object","keys","forEach","key2"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;;;;AAKA,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,WAAOA,KAAP;AACD;;AAED,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMF,KAAN;AAAA,WAAiBE,GAAG,CAACC,UAAJ,CAAe,GAAf,IAAsB,CAAtB,GAA0BH,KAA3C;AAAA,GAAxB;;AAEA,SAAOI,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkBF,MAAM,CAACC,IAAP,CAAYE,SAAZ,CAAsBP,KAAtB,EAA6BC,eAA7B,CAAlB,CAAP;AACD;AAED;;;;;;AAIA,SAASO,uBAAT,CAAiCC,OAAjC,EAA0CC,OAA1C,EAAmDR,GAAnD,EAAqE;AAAA,MAAbS,MAAa,uEAAJ,EAAI;AACnE,MAAMC,OAAO,GAAGH,OAAO,CAACP,GAAD,CAAvB;AACA,MAAMW,OAAO,GAAGH,OAAO,CAACR,GAAD,CAAvB,CAFmE,CAInE;;AACA,MACG,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACY,MAAJ,CAAW,CAAX,MAAkB,GAA7C,IAAoDZ,GAAG,KAAK,QAA7D,IACA,OAAOU,OAAP,KAAmB,UADnB,IAEAV,GAAG,KAAK,QAHV,EAIE;AACA;AACD,GAXkE,CAanE;;;AACA,MAAIU,OAAO,KAAKG,uBAAhB,EAA8B;AAC5B;AACD,GAFD,MAEO,IAAIH,OAAO,KAAK,KAAK,CAArB,EAAwB;AAC7B;AACA;AACA;AACA;AACA;AAEA;AACAH,IAAAA,OAAO,CAACP,GAAD,CAAP,GAAeW,OAAf;AACD,GATM,MASA,IAAIX,GAAG,KAAK,YAAZ,EAA0B;AAC/B;AACA;AACA;AACA,QAAIc,MAAM,CAACJ,OAAD,CAAN,KAAoBI,MAAM,CAACH,OAAD,CAA9B,EAAyC;AACvCJ,MAAAA,OAAO,CAACP,GAAD,CAAP,GAAea,uBAAf;AACD;AACF,GAPM,MAOA,IAAIE,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAJ,EAA4B;AACjC;AACA;AACA,QAAI,CAACD,MAAM,CAACQ,YAAZ,EAA0B;AACxB;AACD;;AACD,QAAI,CAACF,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAL,EAA6B;AAC3BJ,MAAAA,OAAO,CAACP,GAAD,CAAP,GAAea,uBAAf;AACD,KAFD,MAEO;AACL;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACQ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCZ,QAAAA,uBAAuB,CAACI,OAAD,EAAUC,OAAV,EAAmBO,CAAnB,EAAsBT,MAAtB,CAAvB;AACD;AACF;AACF,GAdM,MAcA,IAAI,wBAAcE,OAAd,CAAJ,EAA4B;AACjC;AACA,QAAI,CAAC,wBAAcD,OAAd,CAAL,EAA6B;AAC3B,YAAM,IAAIU,KAAJ,CAAU,4CAA4CpB,GAAtD,CAAN;AACD;;AACDqB,IAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBY,OAArB,CAA6B,UAASC,IAAT,EAAe;AAC1ClB,MAAAA,uBAAuB,CAACI,OAAD,EAAUC,OAAV,EAAmBa,IAAnB,EAAyBf,MAAzB,CAAvB;AACD,KAFD;AAGD,GARM,MAQA,IAAI,wBAAcC,OAAd,CAAJ,EAA4B;AACjC,UAAM,IAAIU,KAAJ,CAAU,4CAA4CpB,GAAtD,CAAN;AACD,GAFM,MAEA,IAAIU,OAAO,KAAKC,OAAhB,EAAyB;AAC9B;AACAJ,IAAAA,OAAO,CAACP,GAAD,CAAP,GAAea,uBAAf;AACD;AACF","sourcesContent":["import {MULTI_VALUED} from './constants';\nimport {isPlainObject} from '../lib';\n\n/**\n * Deep-copies the value using JSON. Underscored (private) keys are removed.\n * @param {*} value Some nested value from the plotDiv object.\n * @returns {*} A deepcopy of the value.\n */\nfunction deepCopyPublic(value) {\n  if (typeof value === 'undefined') {\n    return value;\n  }\n\n  const skipPrivateKeys = (key, value) => (key.startsWith('_') ? 0 : value);\n\n  return window.JSON.parse(window.JSON.stringify(value, skipPrivateKeys));\n}\n\n/*\n * WARNING: When using this function, make intoObj and fromObject are copies of\n * your objects, so that no mutations occur\n */\nfunction setMultiValuedContainer(intoObj, fromObj, key, config = {}) {\n  const intoVal = intoObj[key];\n  const fromVal = fromObj[key];\n\n  // don't merge private attrs\n  if (\n    (typeof key === 'string' && key.charAt(0) === '_' && key !== '_group') ||\n    typeof intoVal === 'function' ||\n    key === 'module'\n  ) {\n    return;\n  }\n\n  // already a mixture of values, can't get any worse\n  if (intoVal === MULTI_VALUED) {\n    return;\n  } else if (intoVal === void 0) {\n    // if the original doesn't have the key it's because that key\n    // doesn't do anything there - so use the new value\n    // note that if fromObj doesn't have a key in intoObj we will not\n    // attempt to merge them at all, so this behavior makes the merge\n    // independent of order.\n\n    // WARNING: Careful that data copies were passed in as args here, as mutation can occur\n    intoObj[key] = fromVal;\n  } else if (key === 'colorscale') {\n    // colorscales are arrays... need to stringify before comparing\n    // (other vals we don't want to stringify, as differences could\n    // potentially be real, like 'false' and false)\n    if (String(intoVal) !== String(fromVal)) {\n      intoObj[key] = MULTI_VALUED;\n    }\n  } else if (Array.isArray(intoVal)) {\n    // in data, other arrays are data, which we don't care about\n    // for styling purposes\n    if (!config.searchArrays) {\n      return;\n    }\n    if (!Array.isArray(fromVal)) {\n      intoObj[key] = MULTI_VALUED;\n    } else {\n      // in layout though, we need to recurse into arrays\n      for (let i = 0; i < fromVal.length; i++) {\n        setMultiValuedContainer(intoVal, fromVal, i, config);\n      }\n    }\n  } else if (isPlainObject(fromVal)) {\n    // recurse into objects\n    if (!isPlainObject(intoVal)) {\n      throw new Error('tried to merge object into non-object: ' + key);\n    }\n    Object.keys(fromVal).forEach(function(key2) {\n      setMultiValuedContainer(intoVal, fromVal, key2, config);\n    });\n  } else if (isPlainObject(intoVal)) {\n    throw new Error('tried to merge non-object into object: ' + key);\n  } else if (intoVal !== fromVal) {\n    // different non-empty values -\n    intoObj[key] = MULTI_VALUED;\n  }\n}\n\nexport {deepCopyPublic, setMultiValuedContainer};\n"],"file":"multiValues.js"}