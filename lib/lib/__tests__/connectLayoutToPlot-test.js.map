{"version":3,"sources":["../../../src/lib/__tests__/connectLayoutToPlot-test.js"],"names":["Layouts","PlotlyPanel","PlotlyFold","PlotlySection","map","connectLayoutToPlot","Editor","props","plotly","onUpdate","jest","fn","forEach","Layout","describe","displayName","it","wrapper","fixtures","scatter","layout","height","find","NumericInput","expect","prop","toBe","beforeUpdateLayout","heightUpdate","payload","mock","calls","toEqual","update","showlegend","expectedMin","expectedMax"],"mappings":"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","sourcesContent":["import NumericInput from '../../components/widgets/NumericInput';\nimport React from 'react';\nimport connectLayoutToPlot from '../connectLayoutToPlot';\nimport {PlotlyFold, PlotlyPanel, PlotlySection} from '../../components/containers';\nimport {Numeric} from '../../components/fields';\nimport {TestEditor, fixtures, plotly} from '../test-utils';\nimport {mount} from 'enzyme';\n\nconst Layouts = [PlotlyPanel, PlotlyFold, PlotlySection].map(connectLayoutToPlot);\nconst Editor = props => <TestEditor {...{plotly, onUpdate: jest.fn(), ...props}} />;\n\nLayouts.forEach(Layout => {\n  describe(`<${Layout.displayName}>`, () => {\n    it(`wraps container with fullValue pointing to gd._fullLayout`, () => {\n      const wrapper = mount(\n        <Editor {...fixtures.scatter({layout: {height: 100}})}>\n          <PlotlyPanel>\n            <Layout>\n              <Numeric label=\"Height\" step={10} attr=\"height\" />\n            </Layout>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"height\"]')\n        .find(NumericInput);\n\n      expect(wrapper.prop('value')).toBe(100);\n    });\n\n    it(`sends updates to gd._layout`, () => {\n      const beforeUpdateLayout = jest.fn();\n      const wrapper = mount(\n        <Editor\n          beforeUpdateLayout={beforeUpdateLayout}\n          {...fixtures.scatter({layout: {height: 100}})}\n        >\n          <PlotlyPanel>\n            <Layout>\n              <Numeric label=\"Height\" step={10} attr=\"height\" />\n            </Layout>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"height\"]')\n        .find(NumericInput);\n\n      const heightUpdate = 200;\n      wrapper.prop('onChange')(heightUpdate);\n      const payload = beforeUpdateLayout.mock.calls[0][0];\n      expect(payload).toEqual({update: {height: heightUpdate}});\n    });\n\n    it(`automatically computes min and max defaults`, () => {\n      const onUpdate = jest.fn();\n      const wrapper = mount(\n        <Editor onUpdate={onUpdate} {...fixtures.scatter({layout: {showlegend: true}})}>\n          <PlotlyPanel>\n            <Layout>\n              <Numeric label=\"Position x\" step={0.01} attr=\"legend.x\" />\n            </Layout>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"legend.x\"]')\n        .find(NumericInput);\n\n      const expectedMin = -2;\n      const expectedMax = 3;\n      expect(wrapper.prop('min')).toBe(expectedMin);\n      expect(wrapper.prop('max')).toBe(expectedMax);\n    });\n  });\n});\n"],"file":"connectLayoutToPlot-test.js"}