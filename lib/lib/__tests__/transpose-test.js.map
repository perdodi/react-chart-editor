{"version":3,"sources":["../../../src/lib/__tests__/transpose-test.js"],"names":["describe","it","originalArray","transposedArray","expect","length","toBe","forEach","subArray","Array","isArray"],"mappings":";;AAAA;;AACA;AACAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BC,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACzC,QAAMC,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB;AACA,QAAMC,eAAe,GAAG,sBAAUD,aAAV,CAAxB;AAEAE,IAAAA,MAAM,CAACD,eAAe,CAACE,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AAEAH,IAAAA,eAAe,CAACI,OAAhB,CAAwB,UAAAC,QAAQ,EAAI;AAClCJ,MAAAA,MAAM,CAACK,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,CAAN,CAAgCF,IAAhC,CAAqC,IAArC;AACAF,MAAAA,MAAM,CAACI,QAAQ,CAACH,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,CAA7B;AACD,KAHD;AAKAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACD,GAdC,CAAF;AAgBAL,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACzC,QAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB;AAIA,QAAMC,eAAe,GAAG,sBAAUD,aAAV,CAAxB;AAEAE,IAAAA,MAAM,CAACD,eAAe,CAACE,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AACAH,IAAAA,eAAe,CAACI,OAAhB,CAAwB,UAAAC,QAAQ,EAAI;AAClCJ,MAAAA,MAAM,CAACK,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,CAAN,CAAgCF,IAAhC,CAAqC,IAArC;AACAF,MAAAA,MAAM,CAACI,QAAQ,CAACH,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,CAA7B;AACD,KAHD;AAKAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACD,GAnBC,CAAF;AAqBAL,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,QAAMC,aAAa,GAAG,CACpB,CAAC,CAAD,EAAI,CAAJ,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFoB,CAAtB;AAIA,QAAMC,eAAe,GAAG,sBAAUD,aAAV,CAAxB;AAEAE,IAAAA,MAAM,CAACD,eAAe,CAACE,MAAjB,CAAN,CAA+BC,IAA/B,CAAoC,CAApC;AACAH,IAAAA,eAAe,CAACI,OAAhB,CAAwB,UAAAC,QAAQ,EAAI;AAClCJ,MAAAA,MAAM,CAACK,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,CAAN,CAAgCF,IAAhC,CAAqC,IAArC;AACAF,MAAAA,MAAM,CAACI,QAAQ,CAACH,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,CAA7B;AACD,KAHD;AAKAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,IAAnC;AACAF,IAAAA,MAAM,CAACD,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAD,CAAN,CAA8BG,IAA9B,CAAmC,CAAnC;AACD,GAnBC,CAAF;AAoBD,CA1DO,CAAR","sourcesContent":["import {transpose} from '../index';\n/* eslint-disable no-magic-numbers */\ndescribe('transpose', () => {\n  it('correctly transposes 1d arrays', () => {\n    const originalArray = [1, 2, 3];\n    const transposedArray = transpose(originalArray);\n\n    expect(transposedArray.length).toBe(3);\n\n    transposedArray.forEach(subArray => {\n      expect(Array.isArray(subArray)).toBe(true);\n      expect(subArray.length).toBe(1);\n    });\n\n    expect(transposedArray[0][0]).toBe(1);\n    expect(transposedArray[1][0]).toBe(2);\n    expect(transposedArray[2][0]).toBe(3);\n  });\n\n  it('correctly transposes 2d arrays', () => {\n    const originalArray = [\n      [1, 2, 3],\n      [9, 8, 0],\n    ];\n    const transposedArray = transpose(originalArray);\n\n    expect(transposedArray.length).toBe(3);\n    transposedArray.forEach(subArray => {\n      expect(Array.isArray(subArray)).toBe(true);\n      expect(subArray.length).toBe(2);\n    });\n\n    expect(transposedArray[0][0]).toBe(1);\n    expect(transposedArray[0][1]).toBe(9);\n    expect(transposedArray[1][0]).toBe(2);\n    expect(transposedArray[1][1]).toBe(8);\n    expect(transposedArray[2][0]).toBe(3);\n    expect(transposedArray[2][1]).toBe(0);\n  });\n\n  it('correctly fills non symmetrical 2d arrays', () => {\n    const originalArray = [\n      [1, 2],\n      [9, 8, 7],\n    ];\n    const transposedArray = transpose(originalArray);\n\n    expect(transposedArray.length).toBe(3);\n    transposedArray.forEach(subArray => {\n      expect(Array.isArray(subArray)).toBe(true);\n      expect(subArray.length).toBe(2);\n    });\n\n    expect(transposedArray[0][0]).toBe(1);\n    expect(transposedArray[0][1]).toBe(9);\n    expect(transposedArray[1][0]).toBe(2);\n    expect(transposedArray[1][1]).toBe(8);\n    expect(transposedArray[2][0]).toBe(null);\n    expect(transposedArray[2][1]).toBe(7);\n  });\n});\n"],"file":"transpose-test.js"}