{"version":3,"sources":["../../../src/lib/__tests__/sortMenu-test.js"],"names":["describe","it","initialArray","props","group","name","orderProp","newArray","expect","toEqual","type"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAAC,UAAD,EAAa,YAAM;AACzBC,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAFmB,CAArB;AAIA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAFgB,CAAlB;AAIA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACN,YAAD,CAAN,CAAqBO,OAArB,CAA6B,CAC3B;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAD2B,EAE3B;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAF2B,CAA7B;AAIAG,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAFuB,CAAzB;AAID,GAnBC,CAAF;AAqBAJ,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJmB,EAKnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KALmB,EAMnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KANmB,CAArB;AAQA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAFgB,EAGhB;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAHgB,EAIhB;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAJgB,EAKhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KALgB,EAMhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KANgB,CAAlB;AAQA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJuB,EAKvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KALuB,EAMvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KANuB,CAAzB;AAQD,GA3BC,CAAF;AA6BAJ,EAAAA,EAAE,CAAC,2EAAD,EAA8E,YAAM;AACpF,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJmB,EAKnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KALmB,EAMnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KANmB,CAArB;AAQA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAFgB,EAGhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAHgB,EAIhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAJgB,CAAlB;AAMA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJuB,EAKvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KALuB,EAMvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,IAAI,EAAE;AAArB;AAAR,KANuB,CAAzB;AAQD,GAzBC,CAAF;AA2BAJ,EAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJmB,CAArB;AAMA,QAAMC,SAAS,GAAG,CAAC;AAACF,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAD,CAAlB;AACA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJuB,CAAzB;AAMD,GAhBC,CAAF;AAkBAJ,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC5C,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJmB,CAArB;AAMA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,cAAR;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAFgB,EAGhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAHgB,EAIhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAJgB,CAAlB;AAMA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJuB,CAAzB;AAMD,GArBC,CAAF;AAuBAJ,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAM;AAC3C,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJmB,CAArB;AAMA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAFgB,EAGhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAHgB,CAAlB;AAKA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJuB,CAAzB;AAMD,GApBC,CAAF;AAsBAJ,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvC,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KADmB,EAEnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAJmB,CAArB;AAMA,QAAMC,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAFgB,EAGhB;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAHgB,CAAlB;AAKA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KADuB,EAEvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJuB,CAAzB;AAMD,GApBC,CAAF;AAsBAJ,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAM;AAC7D,QAAMC,YAAY,GAAG,CACnB;AAACC,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KADmB,EAEnB;AAACP,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,GAAR;AAAaC,QAAAA,IAAI,EAAE;AAAnB;AAAR,KAFmB,EAGnB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHmB,EAInB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAJmB,EAKnB;AAACF,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KALmB,EAMnB;AAACP,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KANmB,CAArB;AAQA,QAAMJ,SAAS,GAAG,CAChB;AAACF,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KADgB,EAEhB;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KAFgB,CAAlB;AAIA,QAAME,QAAQ,GAAG,uBAASL,YAAT,EAAuBI,SAAvB,CAAjB;AAEAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,OAAjB,CAAyB,CACvB;AAACN,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KADuB,EAEvB;AAACP,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAFuB,EAGvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAAR,KAHuB,EAIvB;AAACF,MAAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,GAAR;AAAaC,QAAAA,IAAI,EAAE;AAAnB;AAAR,KAJuB,EAKvB;AAACF,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KALuB,EAMvB;AAACP,MAAAA,KAAK,EAAE;AAACO,QAAAA,IAAI,EAAE;AAAP;AAAR,KANuB,CAAzB;AAQD,GAvBC,CAAF;AAwBD,CA3LO,CAAR","sourcesContent":["import sortMenu from '../sortMenu';\n\ndescribe('sortMenu', () => {\n  it('returns a new array of sorted children', () => {\n    const initialArray = [\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'DEV', name: 'JSON'}},\n    ];\n    const orderProp = [\n      {group: 'DEV', name: 'JSON'},\n      {group: 'DEV', name: 'Inspector'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(initialArray).toEqual([\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'DEV', name: 'JSON'}},\n    ]);\n    expect(newArray).toEqual([\n      {props: {group: 'DEV', name: 'JSON'}},\n      {props: {group: 'DEV', name: 'Inspector'}},\n    ]);\n  });\n\n  it('sorts the array by group, then by name', () => {\n    const initialArray = [\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'DEV', name: 'JSON'}},\n    ];\n    const orderProp = [\n      {group: 'DEV', name: 'JSON'},\n      {group: 'DEV', name: 'Inspector'},\n      {group: 'Structure', name: 'Subplots'},\n      {group: 'Structure', name: 'Create'},\n      {group: 'Style', name: 'Color Bars'},\n      {group: 'Style', name: 'Annotation'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'DEV', name: 'JSON'}},\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ]);\n  });\n\n  it('puts not mentionned panels to the bottom of list and sorts alphabetically', () => {\n    const initialArray = [\n      {props: {group: 'DEV', name: 'JSON'}},\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ];\n    const orderProp = [\n      {group: 'Structure', name: 'Subplots'},\n      {group: 'Structure', name: 'Create'},\n      {group: 'Style', name: 'Color Bars'},\n      {group: 'Style', name: 'Annotation'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n      {props: {group: 'DEV', name: 'Inspector'}},\n      {props: {group: 'DEV', name: 'JSON'}},\n    ]);\n  });\n\n  it('orders not mentionned subpanels at the end, alphabetically', () => {\n    const initialArray = [\n      {props: {group: 'Style', name: 'General'}},\n      {props: {group: 'Style', name: 'Traces'}},\n      {props: {group: 'Style', name: 'Axes'}},\n      {props: {group: 'Structure', name: 'Create'}},\n    ];\n    const orderProp = [{group: 'Style', name: 'Traces'}];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'Style', name: 'Traces'}},\n      {props: {group: 'Style', name: 'Axes'}},\n      {props: {group: 'Style', name: 'General'}},\n      {props: {group: 'Structure', name: 'Create'}},\n    ]);\n  });\n\n  it('ignores non existent panel groups', () => {\n    const initialArray = [\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ];\n    const orderProp = [\n      {group: 'Non Existent', name: 'Subplots'},\n      {group: 'Structure', name: 'Create'},\n      {group: 'Style', name: 'Color Bars'},\n      {group: 'Style', name: 'Annotation'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ]);\n  });\n\n  it('ignores non existent panel names', () => {\n    const initialArray = [\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ];\n    const orderProp = [\n      {group: 'Structure', name: 'Non Existent'},\n      {group: 'Style', name: 'Color Bars'},\n      {group: 'Style', name: 'Annotation'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n    ]);\n  });\n\n  it('ignores invalid combinations', () => {\n    const initialArray = [\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n    ];\n    const orderProp = [\n      {group: 'Structure', name: 'Annotation'},\n      {group: 'Style', name: 'Color Bars'},\n      {group: 'Style', name: 'Annotation'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {group: 'Style', name: 'Color Bars'}},\n      {props: {group: 'Style', name: 'Annotation'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n    ]);\n  });\n\n  it('does not sort children with no group or name props', () => {\n    const initialArray = [\n      {props: {type: 'Logo'}},\n      {props: {group: 'A', name: 'A'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {type: 'ButtonA'}},\n      {props: {type: 'ButtonB'}},\n    ];\n    const orderProp = [\n      {group: 'Structure', name: 'Create'},\n      {group: 'Structure', name: 'Subplots'},\n    ];\n    const newArray = sortMenu(initialArray, orderProp);\n\n    expect(newArray).toEqual([\n      {props: {type: 'Logo'}},\n      {props: {group: 'Structure', name: 'Create'}},\n      {props: {group: 'Structure', name: 'Subplots'}},\n      {props: {group: 'A', name: 'A'}},\n      {props: {type: 'ButtonA'}},\n      {props: {type: 'ButtonB'}},\n    ]);\n  });\n});\n"],"file":"sortMenu-test.js"}