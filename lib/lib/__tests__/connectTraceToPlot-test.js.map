{"version":3,"sources":["../../../src/lib/__tests__/connectTraceToPlot-test.js"],"names":["Traces","PlotlyPanel","PlotlyFold","PlotlySection","map","connectTraceToPlot","Editor","props","plotly","onUpdate","jest","fn","defaultMarkerSize","forEach","Trace","describe","displayName","it","wrapper","fixtures","scatter","find","NumericInput","expect","prop","toBe","beforeUpdateTraces","sizeUpdate","payload","mock","calls","toEqual","update","traceIndexes","name","data","childAt"],"mappings":"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","sourcesContent":["import NumericInput from '../../components/widgets/NumericInput';\nimport React from 'react';\nimport connectTraceToPlot from '../connectTraceToPlot';\nimport {PlotlyFold, PlotlyPanel, PlotlySection} from '../../components/containers';\nimport {Numeric} from '../../components/fields';\nimport {TestEditor, fixtures, plotly} from '../test-utils';\nimport {mount} from 'enzyme';\n\nconst Traces = [PlotlyPanel, PlotlyFold, PlotlySection].map(connectTraceToPlot);\nconst Editor = props => <TestEditor {...{plotly, onUpdate: jest.fn(), ...props}} />;\n\nconst defaultMarkerSize = 6;\n\nTraces.forEach(Trace => {\n  describe(`<${Trace.displayName}>`, () => {\n    it('wraps container with fullValue pointing to gd._fullData[i]', () => {\n      const wrapper = mount(\n        <Editor {...fixtures.scatter()}>\n          <PlotlyPanel>\n            <Trace traceIndexes={[0]}>\n              <Numeric label=\"Marker Size\" attr=\"marker.size\" />\n            </Trace>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"marker.size\"]')\n        .find(NumericInput);\n\n      expect(wrapper.prop('value')).toBe(defaultMarkerSize);\n    });\n\n    it('sends updates to gd.data', () => {\n      const beforeUpdateTraces = jest.fn();\n      const wrapper = mount(\n        <Editor beforeUpdateTraces={beforeUpdateTraces} {...fixtures.scatter()}>\n          <PlotlyPanel>\n            <Trace traceIndexes={[0]}>\n              <Numeric label=\"Marker Size\" attr=\"marker.size\" />\n            </Trace>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"marker.size\"]')\n        .find(NumericInput);\n\n      const sizeUpdate = 200;\n      wrapper.prop('onChange')(sizeUpdate);\n      const payload = beforeUpdateTraces.mock.calls[0][0];\n      expect(payload).toEqual({\n        update: {'marker.size': sizeUpdate},\n        traceIndexes: [0],\n      });\n    });\n\n    it('automatically computes min and max defaults', () => {\n      const wrapper = mount(\n        <Editor {...fixtures.scatter()}>\n          <PlotlyPanel>\n            <Trace traceIndexes={[0]}>\n              <Numeric label=\"marker size\" attr=\"marker.size\" />\n            </Trace>\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find('[attr=\"marker.size\"]')\n        .find(NumericInput);\n\n      expect(wrapper.prop('min')).toBe(0);\n      expect(wrapper.prop('max')).toBe(void 0);\n    });\n\n    it('has the correct name', () => {\n      const name = 'Voldemort';\n      const wrapper = mount(\n        <Editor {...fixtures.scatter({data: [{name}]})}>\n          <PlotlyPanel>\n            <Trace traceIndexes={[0]} />\n          </PlotlyPanel>\n        </Editor>\n      )\n        .find(Trace)\n        .childAt(0);\n      expect(wrapper.props().name).toBe(name);\n    });\n  });\n});\n"],"file":"connectTraceToPlot-test.js"}