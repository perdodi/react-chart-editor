{"version":3,"sources":["../../../src/lib/__tests__/walkObject-test.js"],"names":["UNDEF","undefined","describe","object","callback","beforeEach","ugly","really","fugly","gasp","_secret","shock","jest","fn","it","expect","mock","calls","length","toEqual","expectedCounts","expectedKeys","actualCounts","actualKeys","forEach","call","key","parent","path","pathString","join","push","toBeDefined","indexOf","not","mockReturnValue","count","mockImplementation","walkArrays","type","x","y","transforms","filterId","targetsrc","z","walkArraysMatchingKeys","a","b","c","pathType","actualPaths","map","args","expectedPaths","mockClear","d","test","input","expected"],"mappings":"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","sourcesContent":["import walkObject, {makeAttrSetterPath} from '../walkObject';\n\nconst UNDEF = undefined; // eslint-disable-line\n\n/* eslint-disable no-magic-numbers */\ndescribe('objectUtils', () => {\n  describe('walkObject', () => {\n    let object;\n    let callback;\n\n    beforeEach(() => {\n      object = {\n        [null]: {ugly: 'code'},\n        foo: 'foo',\n        bar: 0,\n        [10]: {20: 'three'},\n        [UNDEF]: {really: {fugly: 'code'}},\n        _private: {gasp: 'o__o'},\n        public: {_secret: {shock: '*__*'}},\n        array: [{}, {}, {}],\n      };\n      callback = jest.fn();\n    });\n\n    it('calls callback with the right args for each key/value pair', () => {\n      walkObject(object, callback);\n\n      // The callback should be called for *every* node in the object.\n      expect(callback.mock.calls.length).toEqual(15); // eslint-disable-line no-magic-numbers\n\n      // Note that keys for objects come back as strings in JS.\n      const expectedCounts = {\n        ['']: 8,\n        ['10']: 1,\n        _private: 1,\n        null: 1,\n        public: 1,\n        ['public._secret']: 1,\n        ['undefined']: 1,\n        ['undefined.really']: 1,\n      };\n      const expectedKeys = [\n        'null',\n        'ugly',\n        'foo',\n        'bar',\n        '10',\n        '20',\n        'undefined',\n        'really',\n        'fugly',\n        '_private',\n        'gasp',\n        'public',\n        '_secret',\n        'shock',\n        'array',\n      ];\n      const actualCounts = {};\n      const actualKeys = [];\n\n      callback.mock.calls.forEach(call => {\n        const [key, parent, path] = call;\n        const pathString = path.join('.');\n        actualCounts[pathString] = (actualCounts[pathString] || 0) + 1;\n        actualKeys.push(key);\n\n        // The parent should have the key we're given.\n        expect(parent[key]).toBeDefined();\n      });\n\n      // We should have been given keys at the expected paths.\n      expect(actualCounts).toEqual(expectedCounts);\n\n      // We should get each key *once*.\n      expect(actualKeys.length).toEqual(expectedKeys.length);\n      expectedKeys.forEach(key => {\n        expect(actualKeys.indexOf(key)).not.toEqual(-1);\n      });\n    });\n\n    it('does not traverse when the callback returns true', () => {\n      // Always return `true`, which tells walkObject not to traverse.\n      callback.mockReturnValue(true);\n\n      walkObject(object, callback);\n\n      // The callback should be called only for top-level nodes.\n      expect(callback.mock.calls.length).toEqual(8); // eslint-disable-line no-magic-numbers\n    });\n\n    it('can be used as a reducer by leveraging a function closure', () => {\n      // Use the given cache to keep a count of the node count.\n      let count = 0;\n      callback.mockImplementation(() => {\n        count++;\n      });\n\n      walkObject(object, callback);\n\n      // Make sure that the reduction was altered as expected.\n      expect(count).toEqual(15); // eslint-disable-line no-magic-numbers\n    });\n\n    it('walks into arrays if walkArrays is true', () => {\n      walkObject(object, callback, {walkArrays: true});\n\n      // The callback should be called for *every* node in the object.\n      expect(callback.mock.calls.length).toEqual(18); // eslint-disable-line no-magic-numbers\n\n      // Note that keys for objects come back as strings in JS.\n      const expectedCounts = {\n        ['']: 8,\n        ['10']: 1,\n        _private: 1,\n        null: 1,\n        public: 1,\n        ['public._secret']: 1,\n        ['undefined']: 1,\n        ['undefined.really']: 1,\n        array: 3,\n      };\n      const expectedKeys = [\n        'null',\n        'ugly',\n        'foo',\n        'bar',\n        '10',\n        '20',\n        'undefined',\n        'really',\n        'fugly',\n        '_private',\n        'gasp',\n        'public',\n        '_secret',\n        'shock',\n        'array',\n        '0',\n        '1',\n        '2',\n      ];\n      const actualCounts = {};\n      const actualKeys = [];\n\n      callback.mock.calls.forEach(call => {\n        const [key, parent, path] = call;\n        const pathString = path.join('.');\n        actualCounts[pathString] = (actualCounts[pathString] || 0) + 1;\n        actualKeys.push(key);\n\n        // The parent should have the key we're given.\n        expect(parent[key]).toBeDefined();\n      });\n\n      // We should have been given keys at the expected paths.\n      expect(actualCounts).toEqual(expectedCounts);\n\n      // We should get each key *once*.\n      expect(actualKeys.length).toEqual(expectedKeys.length);\n      expectedKeys.forEach(key => {\n        expect(actualKeys.indexOf(key)).not.toEqual(-1);\n      });\n    });\n\n    it('walks into arrays specified by walkArraysMatchingKeys', () => {\n      walkObject(\n        [\n          {\n            type: 'scatter',\n            x: [1, 2, 3],\n            y: [1, 2, 3],\n            transforms: [\n              {\n                filterId: 'ababab',\n                type: 'filter',\n                targetsrc: 'hodor:99:aaaaaa',\n              },\n              {\n                filterId: 'bababa',\n                type: 'filter',\n                targetsrc: 'hodor:99:aaaaaa',\n              },\n            ],\n          },\n          {\n            z: [\n              [1, 2, 3],\n              [1, 2, 3],\n            ],\n            type: 'heatmap',\n            transforms: [\n              {\n                type: 'fit',\n              },\n              {\n                filterId: 'bababa',\n                type: 'filter',\n                targetsrc: 'hodor:99:aaaaaa',\n              },\n            ],\n          },\n        ],\n        callback,\n        {walkArraysMatchingKeys: ['transforms', 'data']}\n      );\n\n      const actualCounts = {};\n      const actualKeys = [];\n\n      callback.mock.calls.forEach(call => {\n        const [key, parent, path] = call;\n        const pathString = path.join('.');\n        actualCounts[pathString] = (actualCounts[pathString] || 0) + 1;\n        actualKeys.push(key);\n\n        // The parent should have the key we're given.\n        expect(parent[key]).toBeDefined();\n      });\n\n      expect(actualCounts).toEqual({\n        ['0']: 4,\n        ['1']: 3,\n        ['']: 2,\n        ['0.transforms']: 2,\n        ['0.transforms.0']: 3,\n        ['0.transforms.1']: 3,\n        ['1.transforms']: 2,\n        ['1.transforms.0']: 1,\n        ['1.transforms.1']: 3,\n      });\n      expect(actualKeys).toEqual([\n        '0',\n        'type',\n        'x',\n        'y',\n        'transforms',\n        '0',\n        'filterId',\n        'type',\n        'targetsrc',\n        '1',\n        'filterId',\n        'type',\n        'targetsrc',\n        '1',\n        'z',\n        'type',\n        'transforms',\n        '0',\n        'type',\n        '1',\n        'filterId',\n        'type',\n        'targetsrc',\n      ]);\n    });\n\n    it('produces nestedProperty style paths', () => {\n      walkObject({a: 1, b: [{c: 4}, 2, 3]}, callback, {\n        walkArraysMatchingKeys: ['b'],\n        pathType: 'nestedProperty',\n      });\n\n      let actualPaths = callback.mock.calls.map(args => args[2]);\n      let expectedPaths = ['a', 'b', 'b[0]', 'b[0].c', 'b[1]', 'b[2]'];\n\n      expect(actualPaths).toEqual(expectedPaths);\n\n      callback.mockClear();\n\n      walkObject({[UNDEF]: 1, b: [{c: [{a: 1, d: [{a: 1}]}]}, 2, 3]}, callback, {\n        walkArraysMatchingKeys: ['b', 'c'],\n        pathType: 'nestedProperty',\n      });\n\n      actualPaths = callback.mock.calls.map(args => args[2]);\n      expectedPaths = [\n        'undefined',\n        'b',\n        'b[0]',\n        'b[0].c',\n        'b[0].c[0]',\n        'b[0].c[0].a',\n        'b[0].c[0].d',\n        'b[1]',\n        'b[2]',\n      ];\n\n      expect(actualPaths).toEqual(expectedPaths);\n    });\n  });\n\n  describe('makeAttrSetterPath', () => {\n    function test(input, expected) {\n      expect(makeAttrSetterPath(input)).toEqual(expected);\n    }\n\n    it('creates a basic path', () => {\n      test(['foo', 'bar', 3, 'value'], 'foo.bar[3].value');\n    });\n\n    it('accepts array index notation', () => {\n      test(['foo', 'bar', [3], 'value'], 'foo.bar[3].value');\n    });\n\n    it('accepts array index notation with strings', () => {\n      test(['foo', 'bar', ['3'], 'value'], 'foo.bar[3].value');\n    });\n\n    it('strips _fullData prefix', () => {\n      test(['_fullData', 2, 'bar', 3, 'value'], 'bar[3].value');\n    });\n\n    it('strips _fullInput prefix', () => {\n      test(['_fullData', 2, '_fullInput', 'bar', 3, 'value'], 'bar[3].value');\n    });\n\n    it('strips _fullLayout prefix', () => {\n      test(['_fullLayout', 'bar', 3, 'value'], 'bar[3].value');\n    });\n  });\n});\n"],"file":"walkObject-test.js"}