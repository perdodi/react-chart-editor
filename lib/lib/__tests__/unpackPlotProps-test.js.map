{"version":3,"sources":["../../../src/lib/__tests__/unpackPlotProps-test.js"],"names":["validate","string","expected","config","wrappedComponentDisplayName","isVisible","attr","expect","toBe","describe","customConfig","visibility_rules","blacklist","type","regex_match","exceptions","it","cases","bg_color","somethingElse","colorscale","Object","keys","forEach","c","whitelist","case1","case2"],"mappings":"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","sourcesContent":["import {computeCustomConfigVisibility} from '../index';\n\nconst validate = (string, expected, config, wrappedComponentDisplayName) => {\n  const isVisible = computeCustomConfigVisibility(\n    {attr: string},\n    config,\n    wrappedComponentDisplayName\n  );\n  expect(isVisible).toBe(expected[string]);\n};\n\ndescribe('computeCustomConfigVisibility', () => {\n  const customConfig = {\n    visibility_rules: {\n      blacklist: [\n        {\n          type: 'attrName',\n          regex_match: 'color',\n          exceptions: [\n            {\n              type: 'attrName',\n              regex_match: 'colorscale',\n              exceptions: [\n                {type: 'attrName', regex_match: 'colorscale.title.font.color'},\n                {type: 'attrName', regex_match: 'colorscale.tickcolor'},\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  };\n\n  it('correctly blacklists attributes taking into account exceptions', () => {\n    const cases = {\n      bg_color: false,\n      'font.color': false,\n      somethingElse: true,\n      colorscale: true,\n      'colorscale.somethingElse': true,\n      'colorscale.title.font.color': false,\n      'colorscale.tickcolor': false,\n    };\n\n    Object.keys(cases).forEach(c => validate(c, cases, customConfig));\n  });\n\n  it('correctly whitelists attributes taking into account exceptions', () => {\n    const config = {visibility_rules: {whitelist: customConfig.visibility_rules.blacklist}};\n\n    const cases = {\n      bg_color: true,\n      'font.color': true,\n      somethingElse: false,\n      colorscale: false,\n      'colorscale.somethingElse': false,\n      'colorscale.title.font.color': true,\n      'colorscale.tickcolor': true,\n    };\n\n    Object.keys(cases).forEach(c => validate(c, cases, config));\n  });\n\n  it('correctly displays visibility based on controlType', () => {\n    const config = {\n      visibility_rules: {\n        blacklist: [\n          {\n            type: 'attrName',\n            regex_match: 'color',\n            exceptions: [\n              {\n                type: 'attrName',\n                regex_match: 'marker.color',\n                exceptions: [{type: 'controlType', regex_match: '^ColorscalePicker$'}],\n              },\n            ],\n          },\n        ],\n      },\n    };\n\n    const case1 = {'marker.color': false};\n    const case2 = {'marker.color': true};\n    Object.keys(case1).forEach(c => validate(c, case1, config, 'ColorscalePicker'));\n    Object.keys(case2).forEach(c => validate(c, case2, config, 'AnotherPicker'));\n  });\n});\n"],"file":"unpackPlotProps-test.js"}