{"version":3,"sources":["../../../src/lib/__tests__/maybeTransposeData-test.js"],"names":["describe","it","transposed","expect","length","toBe","Array","isArray"],"mappings":";;AAAA;;AACA;AACAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCC,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtD,QAAMC,UAAU,GAAG,+BACjB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,CADiB,EAKjB,MALiB,EAMjB,SANiB,CAAnB,CADsD,CAUtD;;AACAC,IAAAA,MAAM,CAACD,UAAU,CAACE,MAAZ,CAAN,CAA0BC,IAA1B,CAA+B,CAA/B;AACD,GAZC,CAAF;AAcAJ,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtD,QAAMC,UAAU,GAAG,+BAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,EAA8B,MAA9B,EAAsC,SAAtC,CAAnB,CADsD,CAGtD;;AACAC,IAAAA,MAAM,CAACD,UAAU,CAACE,MAAZ,CAAN,CAA0BC,IAA1B,CAA+B,CAA/B;AACD,GALC,CAAF;AAOAJ,EAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAM;AAC9D,QAAMC,UAAU,GAAG,+BACjB,CACE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF,CADiB,EAKjB,kBALiB,EAMjB,OANiB,CAAnB,CAD8D,CAU9D;;AACAC,IAAAA,MAAM,CAACD,UAAU,CAACE,MAAZ,CAAN,CAA0BC,IAA1B,CAA+B,CAA/B;AACD,GAZC,CAAF;AAcAJ,EAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACnE,QAAMC,UAAU,GAAG,+BAAmB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAAnB,EAAgC,kBAAhC,EAAoD,OAApD,CAAnB,CADmE,CAGnE;;AACAC,IAAAA,MAAM,CAACG,KAAK,CAACC,OAAN,CAAcL,UAAU,CAAC,CAAD,CAAxB,CAAD,CAAN,CAAqCG,IAArC,CAA0C,KAA1C;AACAF,IAAAA,MAAM,CAACD,UAAU,CAACE,MAAZ,CAAN,CAA0BC,IAA1B,CAA+B,CAA/B;AACD,GANC,CAAF;AAOD,CA3CO,CAAR","sourcesContent":["import {maybeTransposeData} from '../index';\n/* eslint-disable no-magic-numbers */\ndescribe('maybeTransposeData', () => {\n  it('transposes 2d data for row based traceTypes', () => {\n    const transposed = maybeTransposeData(\n      [\n        [1, 2, 3],\n        [4, 5, 6],\n      ],\n      'zsrc',\n      'heatmap'\n    );\n\n    // [[1, 4], [2, 5], [3, 6]]\n    expect(transposed.length).toBe(3);\n  });\n\n  it('transposes 1d data for row based traceTypes', () => {\n    const transposed = maybeTransposeData([1, 2, 3], 'zsrc', 'heatmap');\n\n    // [[1], [2], [3]]\n    expect(transposed.length).toBe(3);\n  });\n\n  it('does not transpose data for column based traceTypes', () => {\n    const transposed = maybeTransposeData(\n      [\n        [1, 2, 3],\n        [4, 5, 6],\n      ],\n      'header.valuessrc',\n      'table'\n    );\n\n    // [[1, 2, 3], [4, 5, 6]]\n    expect(transposed.length).toBe(2);\n  });\n\n  it('removes extra array wrapping for special cases in tables', () => {\n    const transposed = maybeTransposeData([[1, 2, 3]], 'header.valuessrc', 'table');\n\n    // [1, 2, 3]\n    expect(Array.isArray(transposed[0])).toBe(false);\n    expect(transposed.length).toBe(3);\n  });\n});\n"],"file":"maybeTransposeData-test.js"}