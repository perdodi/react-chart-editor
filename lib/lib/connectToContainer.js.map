{"version":3,"sources":["../../src/lib/connectToContainer.js"],"names":["containerConnectedContextTypes","localize","PropTypes","func","container","object","data","array","defaultContainer","fullContainer","fullData","fullLayout","getValObject","graphDiv","layout","onUpdate","plotly","updateContainer","traceIndexes","customConfig","hasValidCustomConfigVisibilityRules","bool","connectToContainer","WrappedComponent","config","ContainerConnectedComponent","props","context","plotProps","modifyPlotProps","setLocals","nextProps","nextContext","attr","description","Object","assign","wrappedComponentDisplayName","displayName","isVisible","Component","contextTypes","childContextTypes","string","plotly_editor_traits"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport unpackPlotProps, {isVisibleGivenCustomConfig} from './unpackPlotProps';\nimport {getDisplayName} from '../lib';\n\nexport const containerConnectedContextTypes = {\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  data: PropTypes.array,\n  defaultContainer: PropTypes.object,\n  fullContainer: PropTypes.object,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n  getValObject: PropTypes.func,\n  graphDiv: PropTypes.object,\n  layout: PropTypes.object,\n  onUpdate: PropTypes.func,\n  plotly: PropTypes.object,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  customConfig: PropTypes.object,\n  hasValidCustomConfigVisibilityRules: PropTypes.bool,\n};\n\nexport default function connectToContainer(WrappedComponent, config = {}) {\n  class ContainerConnectedComponent extends Component {\n    // Run the inner modifications first and allow more recent modifyPlotProp\n    // config function to modify last.\n    static modifyPlotProps(props, context, plotProps) {\n      if (WrappedComponent.modifyPlotProps) {\n        WrappedComponent.modifyPlotProps(props, context, plotProps);\n      }\n      if (config.modifyPlotProps) {\n        config.modifyPlotProps(props, context, plotProps);\n      }\n    }\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      this.plotProps = unpackPlotProps(props, context, WrappedComponent);\n      this.attr = props.attr;\n      ContainerConnectedComponent.modifyPlotProps(props, context, this.plotProps);\n    }\n\n    getChildContext() {\n      return {\n        description: this.plotProps.description,\n        attr: this.attr,\n      };\n    }\n\n    render() {\n      // Merge plotprops onto props so leaf components only need worry about\n      // props. However pass plotProps as a specific prop in case inner component\n      // is also wrapped by a component that `unpackPlotProps`. That way inner\n      // component can skip computation as it can see plotProps is already defined.\n      const {plotProps = this.plotProps, ...props} = Object.assign({}, this.plotProps, this.props);\n      const wrappedComponentDisplayName =\n        WrappedComponent && WrappedComponent.displayName ? WrappedComponent.displayName : null;\n\n      if (\n        isVisibleGivenCustomConfig(\n          props.isVisible,\n          props,\n          this.context,\n          wrappedComponentDisplayName\n        )\n      ) {\n        return <WrappedComponent {...props} plotProps={plotProps} />;\n      }\n\n      return null;\n    }\n  }\n\n  ContainerConnectedComponent.displayName = `ContainerConnected${getDisplayName(WrappedComponent)}`;\n\n  ContainerConnectedComponent.contextTypes = containerConnectedContextTypes;\n  ContainerConnectedComponent.childContextTypes = {\n    description: PropTypes.string,\n    attr: PropTypes.string,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  ContainerConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return ContainerConnectedComponent;\n}\n"],"file":"connectToContainer.js"}