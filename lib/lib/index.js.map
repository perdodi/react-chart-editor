{"version":3,"sources":["../../src/lib/index.js"],"names":["TOO_LIGHT_FACTOR","clamp","value","min","max","Math","getDisplayName","WrappedComponent","displayName","name","tooLight","color","hslColor","toHsl","l","renderTraceIcon","trace","prefix","gl","componentName","endsWith","slice","length","PlotlyIcons","PlotLineIcon","transpose","originalArray","every","a","Array","isArray","map","longestArrayItem","forEach","newArray","outerIndex","innerIndex","push","specialTableCase","traceType","srcAttributePath","some","maybeTransposeData","data","isTransposable2DArray","includes","maybeAdjustSrc","src","config","fromSrc","adjustColorscale","colorscale","numberOfNeededColors","colorscaleType","repeat","repetitions","ceil","fill","reduce","b","concat","getFullTrace","props","context","fullTrace","fullData","fullDataArrayPosition","filter","t","traceIndexes","index","transforms","type","_fullInput","getParsedTemplateString","originalString","text"],"mappings":"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","sourcesContent":["import bem from './bem';\nimport connectCartesianSubplotToLayout from './connectCartesianSubplotToLayout';\nimport connectNonCartesianSubplotToLayout from './connectNonCartesianSubplotToLayout';\nimport connectAnnotationToLayout from './connectAnnotationToLayout';\nimport connectShapeToLayout from './connectShapeToLayout';\nimport connectSliderToLayout from './connectSliderToLayout';\nimport connectImageToLayout from './connectImageToLayout';\nimport connectUpdateMenuToLayout from './connectUpdateMenuToLayout';\nimport connectRangeSelectorToAxis from './connectRangeSelectorToAxis';\nimport connectLayersToMapbox from './connectLayersToMapbox';\nimport connectTransformToTrace from './connectTransformToTrace';\nimport connectAggregationToTransform from './connectAggregationToTransform';\nimport connectAxesToLayout from './connectAxesToLayout';\nimport connectLayoutToPlot from './connectLayoutToPlot';\nimport connectToContainer, {containerConnectedContextTypes} from './connectToContainer';\nimport {computeTraceOptionsFromSchema} from './computeTraceOptionsFromSchema';\nimport connectTraceToPlot from './connectTraceToPlot';\nimport dereference from './dereference';\nimport getAllAxes, {\n  axisIdToAxisName,\n  traceTypeToAxisType,\n  getAxisTitle,\n  getSubplotTitle,\n} from './getAllAxes';\nimport localize, {localizeString} from './localize';\nimport tinyColor from 'tinycolor2';\nimport unpackPlotProps, {\n  computeCustomConfigVisibility,\n  hasValidCustomConfigVisibilityRules,\n  isVisibleGivenCustomConfig,\n} from './unpackPlotProps';\nimport walkObject, {isPlainObject} from './walkObject';\nimport {traceTypeToPlotlyInitFigure, plotlyTraceToCustomTrace} from './customTraceType';\nimport * as PlotlyIcons from 'plotly-icons';\nimport striptags from './striptags';\nimport {capitalize, lowerCase, upperCase, removeNonWord, camelCase, pascalCase} from './strings';\nimport {getColorscale} from 'react-colorscales';\nimport {templateString} from 'plotly.js/src/lib';\n\nconst TOO_LIGHT_FACTOR = 0.8;\n\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction tooLight(color) {\n  const hslColor = tinyColor(color).toHsl();\n  return hslColor.l > TOO_LIGHT_FACTOR;\n}\n\nfunction renderTraceIcon(trace, prefix = 'Plot') {\n  if (!trace) {\n    return null;\n  }\n  const gl = 'gl';\n  const componentName = `${prefix}${pascalCase(\n    trace.endsWith(gl) ? trace.slice(0, -gl.length) : trace\n  )}Icon`;\n\n  return PlotlyIcons[componentName] ? PlotlyIcons[componentName] : PlotlyIcons.PlotLineIcon;\n}\n\nfunction transpose(originalArray) {\n  // if we want to transpose a uni dimensional array\n  if (originalArray.every(a => !Array.isArray(a))) {\n    return originalArray.map(a => [a]);\n  }\n\n  let longestArrayItem = Array.isArray(originalArray[0]) ? originalArray[0].length : 1;\n\n  originalArray.forEach(a => {\n    // if it's not an array, it's a string\n    const length = Array.isArray(a) ? a.length : 1;\n    if (length > longestArrayItem) {\n      longestArrayItem = length;\n    }\n  });\n\n  const newArray = new Array(longestArrayItem);\n\n  for (let outerIndex = 0; outerIndex < originalArray.length; outerIndex++) {\n    if (!Array.isArray(originalArray[outerIndex])) {\n      originalArray[outerIndex] = [originalArray[outerIndex]];\n    }\n\n    for (let innerIndex = 0; innerIndex < longestArrayItem; innerIndex++) {\n      // ensure we have an array to push to\n      if (!Array.isArray(newArray[innerIndex])) {\n        newArray[innerIndex] = [];\n      }\n\n      const value =\n        typeof originalArray[outerIndex][innerIndex] !== 'undefined'\n          ? originalArray[outerIndex][innerIndex]\n          : null;\n      newArray[innerIndex].push(value);\n    }\n  }\n\n  return newArray;\n}\n\nconst specialTableCase = (traceType, srcAttributePath) => {\n  /* Just more user friendly\n   * Table traces have many configuration options,\n   * The below attributes can be 2d or 1d and will affect the plot differently\n   * EX:\n   * header.values = ['Jan', 'Feb', 'Mar'] => will put data in a row\n   * header.values = [['Jan', 1], ['Feb', 2], ['Mar', 3]] => will create 3 columns\n   * 1d arrays affect columns\n   * 2d arrays affect rows within each column\n   */\n  return (\n    traceType === 'table' &&\n    [\n      'header.valuessrc',\n      'header.font.colorsrc',\n      'header.font.sizesrc',\n      'header.fill.colorsrc',\n      'columnwidthsrc',\n    ].some(a => srcAttributePath.endsWith(a))\n  );\n};\n\nfunction maybeTransposeData(data, srcAttributePath, traceType) {\n  if (!data || (Array.isArray(data) && data.length === 0)) {\n    return null;\n  }\n\n  const isTransposable2DArray =\n    srcAttributePath.endsWith('zsrc') &&\n    ['contour', 'contourgl', 'heatmap', 'heatmapgl', 'surface', 'carpet', 'contourcarpet'].includes(\n      traceType\n    );\n\n  if (isTransposable2DArray) {\n    return transpose(data);\n  }\n\n  if (\n    specialTableCase(traceType, srcAttributePath) &&\n    Array.isArray(data[0]) &&\n    data.length === 1\n  ) {\n    return data[0];\n  }\n\n  return data;\n}\n\nfunction maybeAdjustSrc(src, srcAttributePath, traceType, config) {\n  if (!src || (Array.isArray(src) && src.length === 0)) {\n    return null;\n  }\n\n  if (specialTableCase(traceType, srcAttributePath) && src.length === 1) {\n    return src[0];\n  }\n\n  return config && config.fromSrc ? config.fromSrc(src, traceType, srcAttributePath) : src;\n}\n\nfunction adjustColorscale(colorscale, numberOfNeededColors, colorscaleType, config) {\n  if (config && config.repeat) {\n    if (numberOfNeededColors < colorscale.length) {\n      return colorscale.slice(0, numberOfNeededColors);\n    }\n\n    const repetitions = Math.ceil(numberOfNeededColors / colorscale.length);\n    const newArray = new Array(repetitions).fill(colorscale);\n    return newArray\n      .reduce((a, b) => {\n        return a.concat(b);\n      }, [])\n      .slice(0, numberOfNeededColors);\n  }\n\n  return getColorscale(colorscale, numberOfNeededColors, null, null, colorscaleType);\n}\n\nfunction getFullTrace(props, context) {\n  let fullTrace = {};\n  if (context.fullData && context.data) {\n    if (props.fullDataArrayPosition) {\n      // fullDataArrayPosition will be supplied in panels that have the canGroup prop\n      fullTrace = context.fullData[props.fullDataArrayPosition[0]];\n    } else {\n      // for all other panels, we'll find fullTrace with the data index\n      fullTrace = context.fullData.filter(t => t && props.traceIndexes[0] === t.index)[0];\n    }\n\n    // For transformed traces, we actually want to read in _fullInput because\n    // there's original parent information that's more useful to the user there\n    // This is true except for fit transforms, where reading in fullData is\n    // what we want\n    if (\n      fullTrace &&\n      fullTrace.transforms &&\n      !fullTrace.transforms.some(t => ['moving-average', 'fits'].includes(t.type)) &&\n      !props.fullDataArrayPosition\n    ) {\n      fullTrace = fullTrace._fullInput;\n    }\n  }\n  return fullTrace;\n}\n\nfunction getParsedTemplateString(originalString, context) {\n  let text = originalString;\n\n  if (originalString && context) {\n    text = templateString(originalString, context);\n  }\n\n  return text === '' && originalString ? originalString : text;\n}\n\nexport {\n  adjustColorscale,\n  computeCustomConfigVisibility,\n  axisIdToAxisName,\n  bem,\n  camelCase,\n  capitalize,\n  clamp,\n  computeTraceOptionsFromSchema,\n  connectAggregationToTransform,\n  connectAnnotationToLayout,\n  connectAxesToLayout,\n  connectCartesianSubplotToLayout,\n  connectImageToLayout,\n  connectLayoutToPlot,\n  connectNonCartesianSubplotToLayout,\n  connectRangeSelectorToAxis,\n  connectLayersToMapbox,\n  connectShapeToLayout,\n  connectSliderToLayout,\n  connectToContainer,\n  connectTraceToPlot,\n  connectTransformToTrace,\n  connectUpdateMenuToLayout,\n  containerConnectedContextTypes,\n  dereference,\n  getAllAxes,\n  getAxisTitle,\n  getDisplayName,\n  getFullTrace,\n  getSubplotTitle,\n  isPlainObject,\n  hasValidCustomConfigVisibilityRules,\n  localize,\n  localizeString,\n  lowerCase,\n  maybeAdjustSrc,\n  maybeTransposeData,\n  getParsedTemplateString,\n  pascalCase,\n  plotlyTraceToCustomTrace,\n  removeNonWord,\n  renderTraceIcon,\n  striptags,\n  tooLight,\n  traceTypeToAxisType,\n  traceTypeToPlotlyInitFigure,\n  transpose,\n  unpackPlotProps,\n  upperCase,\n  isVisibleGivenCustomConfig,\n  walkObject,\n};\n"],"file":"index.js"}