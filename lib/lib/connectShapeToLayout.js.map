{"version":3,"sources":["../../src/lib/connectShapeToLayout.js"],"names":["connectShapeToLayout","WrappedComponent","ShapeConnectedComponent","props","context","deleteShape","bind","updateShape","moveShape","setLocals","nextProps","nextContext","shapeIndex","container","fullContainer","shapes","fullShapes","getValObject","attr","updateContainer","deleteContainer","moveContainer","update","newUpdate","key","newkey","onUpdate","type","EDITOR_ACTIONS","DELETE_SHAPE","payload","direction","desiredIndex","MOVE_TO","fromIndex","toIndex","path","Component","displayName","propTypes","PropTypes","number","isRequired","contextTypes","object","data","array","func","childContextTypes","plotly_editor_traits"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {getDisplayName} from '../lib';\nimport {EDITOR_ACTIONS} from './constants';\n\nexport default function connectShapeToLayout(WrappedComponent) {\n  class ShapeConnectedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this.deleteShape = this.deleteShape.bind(this);\n      this.updateShape = this.updateShape.bind(this);\n      this.moveShape = this.moveShape.bind(this);\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      const {shapeIndex} = props;\n      const {container, fullContainer} = context;\n\n      const shapes = container.shapes || [];\n      const fullShapes = fullContainer.shapes || [];\n      this.container = shapes[shapeIndex];\n      this.fullContainer = fullShapes[shapeIndex];\n    }\n\n    getChildContext() {\n      return {\n        getValObject: attr =>\n          !this.context.getValObject ? null : this.context.getValObject(`shapes[].${attr}`),\n        updateContainer: this.updateShape,\n        deleteContainer: this.deleteShape,\n        container: this.container,\n        fullContainer: this.fullContainer,\n        moveContainer: this.moveShape,\n      };\n    }\n\n    updateShape(update) {\n      const newUpdate = {};\n      const {shapeIndex} = this.props;\n      for (const key in update) {\n        const newkey = `shapes[${shapeIndex}].${key}`;\n        newUpdate[newkey] = update[key];\n      }\n      this.context.updateContainer(newUpdate);\n    }\n\n    deleteShape() {\n      if (this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.DELETE_SHAPE,\n          payload: {shapeIndex: this.props.shapeIndex},\n        });\n      }\n    }\n\n    moveShape(direction) {\n      if (this.context.onUpdate) {\n        const shapeIndex = this.props.shapeIndex;\n        const desiredIndex = direction === 'up' ? shapeIndex - 1 : shapeIndex + 1;\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.MOVE_TO,\n          payload: {\n            fromIndex: shapeIndex,\n            toIndex: desiredIndex,\n            path: 'layout.shapes',\n          },\n        });\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  ShapeConnectedComponent.displayName = `ShapeConnected${getDisplayName(WrappedComponent)}`;\n\n  ShapeConnectedComponent.propTypes = {\n    shapeIndex: PropTypes.number.isRequired,\n  };\n\n  ShapeConnectedComponent.contextTypes = {\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n    data: PropTypes.array,\n    onUpdate: PropTypes.func,\n    updateContainer: PropTypes.func,\n    getValObject: PropTypes.func,\n  };\n\n  ShapeConnectedComponent.childContextTypes = {\n    updateContainer: PropTypes.func,\n    deleteContainer: PropTypes.func,\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n    getValObject: PropTypes.func,\n    moveContainer: PropTypes.func,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  ShapeConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return ShapeConnectedComponent;\n}\n"],"file":"connectShapeToLayout.js"}