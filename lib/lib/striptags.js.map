{"version":3,"sources":["../../src/lib/striptags.js"],"names":["Symbol","name","nonNative","STATE_PLAINTEXT","STATE_HTML","STATE_COMMENT","ALLOWED_TAGS_REGEX","NORMALIZE_TAG_REGEX","striptags","html","allowable_tags","tag_replacement","context","init_context","striptags_internal","init_striptags_stream","striptags_stream","init_streaming_mode","parse_allowable_tags","state","tag_buffer","depth","in_quote_char","output","idx","length","char","has","normalize_tag","slice","tag_set","Set","match","exec","add","iterator","forEach","toLowerCase"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\n// The MIT License (MIT)\n//\n// Copyright (c) [2017] [Eric Norris]\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n'use strict';\n\n// minimal symbol polyfill for IE11 and others\nif (typeof Symbol !== 'function') {\n  var Symbol = function(name) {\n    return name;\n  };\n\n  Symbol.nonNative = true;\n}\n\nconst STATE_PLAINTEXT = Symbol('plaintext');\nconst STATE_HTML = Symbol('html');\nconst STATE_COMMENT = Symbol('comment');\n\nconst ALLOWED_TAGS_REGEX = /<(\\w*)>/g;\nconst NORMALIZE_TAG_REGEX = /<\\/?([^\\s\\/>]+)/;\n\nfunction striptags(html, allowable_tags, tag_replacement) {\n  html = html || '';\n  allowable_tags = allowable_tags || [];\n  tag_replacement = tag_replacement || '';\n\n  const context = init_context(allowable_tags, tag_replacement);\n\n  return striptags_internal(html, context);\n}\n\nfunction init_striptags_stream(allowable_tags, tag_replacement) {\n  allowable_tags = allowable_tags || [];\n  tag_replacement = tag_replacement || '';\n\n  const context = init_context(allowable_tags, tag_replacement);\n\n  return function striptags_stream(html) {\n    return striptags_internal(html || '', context);\n  };\n}\n\nstriptags.init_streaming_mode = init_striptags_stream;\n\nfunction init_context(allowable_tags, tag_replacement) {\n  allowable_tags = parse_allowable_tags(allowable_tags);\n\n  return {\n    allowable_tags: allowable_tags,\n    tag_replacement: tag_replacement,\n\n    state: STATE_PLAINTEXT,\n    tag_buffer: '',\n    depth: 0,\n    in_quote_char: '',\n  };\n}\n\nfunction striptags_internal(html, context) {\n  const allowable_tags = context.allowable_tags;\n  const tag_replacement = context.tag_replacement;\n\n  let state = context.state;\n  let tag_buffer = context.tag_buffer;\n  let depth = context.depth;\n  let in_quote_char = context.in_quote_char;\n  let output = '';\n\n  for (let idx = 0, length = html.length; idx < length; idx++) {\n    const char = html[idx];\n\n    if (state === STATE_PLAINTEXT) {\n      switch (char) {\n        case '<':\n          state = STATE_HTML;\n          tag_buffer += char;\n          break;\n\n        default:\n          output += char;\n          break;\n      }\n    } else if (state === STATE_HTML) {\n      switch (char) {\n        case '<':\n          // ignore '<' if inside a quote\n          if (in_quote_char) {\n            break;\n          }\n\n          // we're seeing a nested '<'\n          depth++;\n          break;\n\n        case '>':\n          // ignore '>' if inside a quote\n          if (in_quote_char) {\n            break;\n          }\n\n          // something like this is happening: '<<>>'\n          if (depth) {\n            depth--;\n\n            break;\n          }\n\n          // this is closing the tag in tag_buffer\n          in_quote_char = '';\n          state = STATE_PLAINTEXT;\n          tag_buffer += '>';\n\n          if (allowable_tags.has(normalize_tag(tag_buffer))) {\n            output += tag_buffer;\n          } else {\n            output += tag_replacement;\n          }\n\n          tag_buffer = '';\n          break;\n\n        case '\"':\n        case \"'\":\n          // catch both single and double quotes\n\n          if (char === in_quote_char) {\n            in_quote_char = '';\n          } else {\n            in_quote_char = in_quote_char || char;\n          }\n\n          tag_buffer += char;\n          break;\n\n        case '-':\n          if (tag_buffer === '<!-') {\n            state = STATE_COMMENT;\n          }\n\n          tag_buffer += char;\n          break;\n\n        case ' ':\n        case '\\n':\n          if (tag_buffer === '<') {\n            state = STATE_PLAINTEXT;\n            output += '< ';\n            tag_buffer = '';\n\n            break;\n          }\n\n          tag_buffer += char;\n          break;\n\n        default:\n          tag_buffer += char;\n          break;\n      }\n    } else if (state === STATE_COMMENT) {\n      switch (char) {\n        case '>':\n          if (tag_buffer.slice(-2) == '--') {\n            // close the comment\n            state = STATE_PLAINTEXT;\n          }\n\n          tag_buffer = '';\n          break;\n\n        default:\n          tag_buffer += char;\n          break;\n      }\n    }\n  }\n\n  // save the context for future iterations\n  context.state = state;\n  context.tag_buffer = tag_buffer;\n  context.depth = depth;\n  context.in_quote_char = in_quote_char;\n\n  return output;\n}\n\nfunction parse_allowable_tags(allowable_tags) {\n  let tag_set = new Set();\n\n  if (typeof allowable_tags === 'string') {\n    let match;\n\n    while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {\n      tag_set.add(match[1]);\n    }\n  } else if (!Symbol.nonNative && typeof allowable_tags[Symbol.iterator] === 'function') {\n    tag_set = new Set(allowable_tags);\n  } else if (typeof allowable_tags.forEach === 'function') {\n    // IE11 compatible\n    allowable_tags.forEach(tag_set.add, tag_set);\n  }\n\n  return tag_set;\n}\n\nfunction normalize_tag(tag_buffer) {\n  const match = NORMALIZE_TAG_REGEX.exec(tag_buffer);\n\n  return match ? match[1].toLowerCase() : null;\n}\n\nexport default striptags;\n"],"file":"striptags.js"}