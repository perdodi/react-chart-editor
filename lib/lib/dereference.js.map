{"version":3,"sources":["../../src/lib/dereference.js"],"names":["SRC_ATTR_PATTERN","getColumnNames","srcArray","dataSourceOptions","map","src","columns","filter","dso","value","length","columnName","label","join","dereference","container","dataSources","config","deleteKeys","containerIsData","Array","isArray","replacer","key","parent","srcPath","test","dataKey","replace","srcRef","toSrc","dereferencedData","ref","type","meta","columnNames","walkArraysMatchingKeys","pathType"],"mappings":"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","sourcesContent":["import walkObject from './walkObject';\nimport {maybeTransposeData} from './index';\n\nconst SRC_ATTR_PATTERN = /src$/;\n\nexport function getColumnNames(srcArray, dataSourceOptions) {\n  return srcArray\n    .map(src => {\n      const columns = dataSourceOptions.filter(dso => dso.value === src);\n      if (columns.length === 1) {\n        return columns[0].columnName || columns[0].label;\n      }\n      return '';\n    })\n    .join(' - ');\n}\n\nexport default function dereference(\n  container,\n  dataSources,\n  config = {deleteKeys: false},\n  dataSourceOptions = null\n) {\n  const containerIsData = Array.isArray(container);\n\n  const replacer = (key, parent, srcPath) => {\n    if (!SRC_ATTR_PATTERN.test(key)) {\n      return;\n    }\n\n    const dataKey = key.replace(SRC_ATTR_PATTERN, '');\n\n    let srcRef = config.toSrc ? config.toSrc(parent[key]) : parent[key];\n\n    // making this into an array to more easily lookup 1d and 2d srcs in dataSourceOptions\n    if (!Array.isArray(srcRef)) {\n      srcRef = [srcRef];\n    }\n\n    let dereferencedData = srcRef.map(ref => {\n      if (config.deleteKeys && !(ref in dataSources)) {\n        delete parent[dataKey];\n      }\n      return dataSources[ref];\n    });\n\n    // remove extra data wrapping\n    if (srcRef.length === 1) {\n      dereferencedData = dereferencedData[0];\n    }\n\n    if (!Array.isArray(dereferencedData)) {\n      return;\n    }\n\n    if (containerIsData) {\n      if (parent.type !== null) {\n        // we're at the top level of the trace\n        if (dataSourceOptions !== null) {\n          parent.meta = parent.meta || {};\n          parent.meta.columnNames = parent.meta.columnNames || {};\n          parent.meta.columnNames[dataKey] = getColumnNames(srcRef, dataSourceOptions);\n        }\n        parent[dataKey] = maybeTransposeData(dereferencedData, srcPath, parent.type);\n      } else {\n        parent[dataKey] = dereferencedData;\n      }\n    } else {\n      // container is layout\n      parent[dataKey] = dereferencedData;\n    }\n  };\n\n  if (containerIsData) {\n    walkObject(container, replacer, {\n      walkArraysMatchingKeys: ['data', 'transforms'],\n      pathType: 'nestedProperty',\n    });\n  } else {\n    // container is layout\n    walkObject(container, replacer, {pathType: 'nestedProperty'});\n  }\n}\n"],"file":"dereference.js"}