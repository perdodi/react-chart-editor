{"version":3,"sources":["../../src/lib/sortMenu.js"],"names":["getUniqueValues","value","index","self","indexOf","sortAlphabetically","a","b","sortByGroup","props","group","sortByName","name","sortMenu","children","order","panelsStartIndex","panelsEndIndex","i","length","prePanelsChildren","slice","panels","postPanelsChildren","filter","desiredPanel","some","actualPanel","desiredGroupOrder","map","panel","sort","panelAHasGroupCustomOrder","includes","panelBHasGroupCustomOrder","indexOfGroupA","indexOfGroupB","desiredNameOrder","panelAHasNameCustomOrder","panelBHasNameCustomOrder","concat"],"mappings":"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","sourcesContent":["function getUniqueValues(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nfunction sortAlphabetically(a, b) {\n  const sortByGroup = a.props.group === b.props.group ? 0 : a.props.group < b.props.group ? -1 : 1;\n  const sortByName = a.props.name === b.props.name ? 0 : a.props.name < b.props.name ? -1 : 1;\n  return sortByGroup || sortByName;\n}\n\nexport default function sortMenu(children, order) {\n  // Break out early if no order is provided\n  if (!order) {\n    return children;\n  }\n\n  // PART 1: only sorting panels (i.e. child with a group and name prop)\n  // and not other elements (like Buttons, or Logo)\n  let panelsStartIndex = null;\n  let panelsEndIndex = null;\n  for (let i = 0; i < children.length; i++) {\n    if (children[i].props.group && children[i].props.name && !panelsStartIndex) {\n      panelsStartIndex = i;\n      break;\n    }\n  }\n  for (let i = panelsStartIndex; i < children.length; i++) {\n    if (!children[i].props.group && !children[i].props.name && !panelsEndIndex) {\n      panelsEndIndex = i - 1;\n      break;\n    } else if (i === children.length - 1) {\n      panelsEndIndex = i;\n    }\n  }\n\n  const prePanelsChildren = panelsStartIndex === 0 ? [] : children.slice(0, panelsStartIndex);\n  const panels =\n    panelsStartIndex !== panelsEndIndex ? children.slice(panelsStartIndex, panelsEndIndex + 1) : [];\n  const postPanelsChildren =\n    panelsEndIndex === children.length ? [] : children.slice(panelsEndIndex + 1);\n\n  // PART 2: validate order prop, if a desired panel specified in order, matches no actual panel rendered\n  // in the panels array, it is excluded from ordering considerations\n  // eslint-disable-next-line\n  order = order.filter(desiredPanel =>\n    panels.some(\n      actualPanel =>\n        actualPanel.props.name === desiredPanel.name &&\n        actualPanel.props.group === desiredPanel.group\n    )\n  );\n\n  const desiredGroupOrder = order.map(panel => panel.group).filter(getUniqueValues);\n\n  // PART 3: Sort panels\n  panels.sort((a, b) => {\n    const panelAHasGroupCustomOrder = desiredGroupOrder.includes(a.props.group);\n    const panelBHasGroupCustomOrder = desiredGroupOrder.includes(b.props.group);\n\n    // if one of the elements is not in the desiredGroupOrder array, then it goes to the end of the list\n    if (panelAHasGroupCustomOrder && !panelBHasGroupCustomOrder) {\n      return -1;\n    }\n    if (!panelAHasGroupCustomOrder && panelBHasGroupCustomOrder) {\n      return 1;\n    }\n\n    // if both elements are not in the desiredGroupOrder array, they get sorted alphabetically,\n    // by group, then by name\n    if (!panelAHasGroupCustomOrder && !panelBHasGroupCustomOrder) {\n      return sortAlphabetically(a, b);\n    }\n\n    // if both elements are in the desiredGroupOrder array, they get sorted according to their order in\n    // the desiredGroupOrder, then desiredNameOrder arrays.\n    if (panelAHasGroupCustomOrder && panelBHasGroupCustomOrder) {\n      const indexOfGroupA = desiredGroupOrder.indexOf(a.props.group);\n      const indexOfGroupB = desiredGroupOrder.indexOf(b.props.group);\n\n      if (indexOfGroupA < indexOfGroupB) {\n        return -1;\n      }\n\n      if (indexOfGroupA > indexOfGroupB) {\n        return 1;\n      }\n\n      if (indexOfGroupA === indexOfGroupB) {\n        // Since Subpanels names can be reused in different groups\n        // we compute desired order here to get the desired index right.\n        // We are filtering on unique values, just in case, even if we don't\n        // have to because within a given group we'd assume that there will be\n        // no 2 subpanels named the same.\n        const desiredNameOrder = order\n          .filter(panel => panel.group === a.props.group)\n          .map(panel => panel.name)\n          .filter(getUniqueValues);\n\n        const panelAHasNameCustomOrder = desiredNameOrder.includes(a.props.name);\n        const panelBHasNameCustomOrder = desiredNameOrder.includes(b.props.name);\n\n        if (!panelAHasNameCustomOrder || !panelBHasNameCustomOrder) {\n          if (panelAHasNameCustomOrder && !panelBHasNameCustomOrder) {\n            return -1;\n          }\n          if (!panelAHasNameCustomOrder && panelBHasNameCustomOrder) {\n            return 1;\n          }\n          if (!panelAHasNameCustomOrder && !panelBHasNameCustomOrder) {\n            return sortAlphabetically(a, b);\n          }\n        }\n\n        if (panelAHasNameCustomOrder && panelBHasNameCustomOrder) {\n          return desiredNameOrder.indexOf(a.props.name) - desiredNameOrder.indexOf(b.props.name);\n        }\n      }\n    }\n    return 0;\n  });\n\n  // PART 4: Return all children\n  return prePanelsChildren.concat(panels).concat(postPanelsChildren);\n}\n"],"file":"sortMenu.js"}