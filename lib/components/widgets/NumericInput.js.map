{"version":3,"sources":["../../../src/components/widgets/NumericInput.js"],"names":["UP_ARROW","DOWN_ARROW","NumericInput","props","state","value","numericInputClassName","getNumericInputClassName","onChange","bind","updateValue","onKeyDown","onWheel","editableClassName","nextProps","setState","e","keyCode","incrementValue","stopPropagation","preventDefault","deltaY","newValue","max","min","integerOnly","updatedValue","Number","Math","floor","onUpdate","direction","defaultValue","step","stepmode","valueUpdate","x","parseFloat","absMode","showArrows","showSlider","placeholder","renderArrows","renderSlider","units","Component","propTypes","PropTypes","any","string","bool","number","func","isRequired","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import EditableText from './EditableText';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport isNumeric from 'fast-isnumeric';\nimport Slider from 'react-rangeslider';\nimport {CarretDownIcon, CarretUpIcon} from 'plotly-icons';\n\nexport const UP_ARROW = 38;\nexport const DOWN_ARROW = 40;\n\nexport default class NumericInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      numericInputClassName: this.getNumericInputClassName(props.value),\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n\n  getNumericInputClassName(value) {\n    return isNumeric(value) || value === ''\n      ? `numeric-input__number ${this.props.editableClassName ? this.props.editableClassName : ''}`\n      : `numeric-input__number +error ${\n          this.props.editableClassName ? this.props.editableClassName : ''\n        }`;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.state.value) {\n      this.setState({value: nextProps.value});\n    }\n  }\n\n  onKeyDown(e) {\n    switch (e.keyCode) {\n      case UP_ARROW:\n        this.incrementValue('increase');\n        break;\n      case DOWN_ARROW:\n        this.incrementValue('decrease');\n        break;\n      default:\n        break;\n    }\n  }\n\n  onWheel(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    if (e.deltaY > 0) {\n      this.incrementValue('increase');\n    } else {\n      this.incrementValue('decrease');\n    }\n  }\n\n  onChange(value) {\n    this.setState({value, numericInputClassName: this.getNumericInputClassName(value)});\n  }\n\n  updateValue(newValue) {\n    const {max, min, integerOnly} = this.props;\n    let updatedValue = newValue;\n\n    if (updatedValue === '') {\n      this.setState({\n        value: this.props.value,\n        numericInputClassName: this.getNumericInputClassName(this.props.value),\n      });\n      return;\n    }\n\n    // When the user blurs on non-numeric data reset the component\n    // to the last known good value (this.props.value).\n    if (!isNumeric(updatedValue)) {\n      this.setState({\n        value: updatedValue,\n        numericInputClassName: this.getNumericInputClassName(updatedValue),\n      });\n      return;\n    }\n\n    updatedValue = Number(updatedValue);\n    if (integerOnly) {\n      updatedValue = Math.floor(updatedValue);\n    }\n\n    if (isNumeric(min)) {\n      updatedValue = Math.max(min, updatedValue);\n    }\n\n    if (isNumeric(max)) {\n      updatedValue = Math.min(max, updatedValue);\n    }\n\n    this.props.onUpdate(updatedValue);\n  }\n\n  incrementValue(direction) {\n    const {defaultValue, min, step = 1, stepmode = 'absolute'} = this.props;\n    const {value} = this.state;\n\n    let valueUpdate;\n    if (isNumeric(value)) {\n      const x = parseFloat(value);\n      const absMode = stepmode === 'absolute';\n      if (direction === 'increase') {\n        valueUpdate = absMode ? x + step : x * (1 + step);\n      } else {\n        valueUpdate = absMode ? x - step : x / (1 + step);\n      }\n    } else {\n      // if we are multi-valued and the user is incrementing or decrementing\n      // update with some sane value so we can \"break\" out of multi-valued mode.\n      if (isNumeric(defaultValue)) {\n        valueUpdate = defaultValue;\n      } else {\n        // TODO smarter handling depending if user decrements or increments?\n        valueUpdate = min || 0;\n      }\n    }\n\n    // incrementers blur the line between blur and onChange.\n    this.updateValue(valueUpdate);\n  }\n\n  renderArrows() {\n    if (!this.props.showArrows || this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <div className=\"numeric-input__caret-box\">\n        <div\n          className=\"numeric-input__caret js-numeric-increase\"\n          onClick={this.incrementValue.bind(this, 'increase')}\n        >\n          <CarretUpIcon className=\"numeric-top-caret-modifier\" />\n        </div>\n        <div\n          className=\"numeric-input__caret js-numeric-decrease\"\n          onClick={this.incrementValue.bind(this, 'decrease')}\n        >\n          <CarretDownIcon className=\"numeric-bottom-caret-modifier\" />\n        </div>\n      </div>\n    );\n  }\n\n  renderSlider() {\n    if (!this.props.showSlider) {\n      return null;\n    }\n\n    return (\n      <Slider\n        min={this.props.min}\n        max={this.props.max}\n        step={this.props.step}\n        value={parseFloat(this.state.value)}\n        onChange={this.updateValue}\n        tooltip={false}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"numeric-input__wrapper\">\n        <EditableText\n          className={this.state.numericInputClassName}\n          placeholder={this.props.placeholder}\n          text={this.state.value}\n          type=\"text\"\n          onChange={this.onChange}\n          onUpdate={this.updateValue}\n          onKeyDown={this.onKeyDown}\n          onWheel={this.onWheel}\n        />\n        {this.renderArrows()}\n        {this.renderSlider()}\n        {this.props.units ? this.props.units : null}\n      </div>\n    );\n  }\n}\n\nNumericInput.propTypes = {\n  defaultValue: PropTypes.any,\n  editableClassName: PropTypes.string,\n  integerOnly: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  onUpdate: PropTypes.func.isRequired,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  showArrows: PropTypes.bool,\n  showSlider: PropTypes.bool,\n  step: PropTypes.number,\n  stepmode: PropTypes.string,\n  value: PropTypes.any,\n  units: PropTypes.string,\n};\n\nNumericInput.defaultProps = {\n  showArrows: true,\n};\n"],"file":"NumericInput.js"}