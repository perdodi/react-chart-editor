{"version":3,"sources":["../../../src/components/widgets/FlaglistCheckboxGroup.js"],"names":["FlaglistCheckboxGroup","props","currentActiveOption","activeOption","state","parseFlags","handleChange","bind","option","options","map","o","value","join","nextProps","setState","newOptions","newActiveOptions","checked","slice","length","onChange","activeOptions","split","allOptions","currentChecked","indexOf","push","label","renderCheckedOption","className","orientation","Component","propTypes","PropTypes","arrayOf","shape","any","isRequired","string","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport CheckboxGroup from './CheckboxGroup';\n\n// Component handles activeOption with shape \"x+y+z\"\n// and ties it to the CheckboxGroup Component\nclass FlaglistCheckboxGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    let currentActiveOption;\n    if (props.activeOption !== null) {\n      currentActiveOption = props.activeOption;\n    } else {\n      currentActiveOption = '';\n    }\n\n    this.state = {\n      activeOption: this.parseFlags(currentActiveOption),\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // convert plotly.js's \"all\" or \"none\" option in its `flaglist` type\n  // to a series of options separated by `+` that our component can handle\n  parseFlags(option) {\n    let activeOption;\n    if (option === 'all') {\n      activeOption = this.props.options.map(o => o.value).join('+');\n    } else if (option === 'none') {\n      activeOption = '';\n    } else {\n      activeOption = option;\n    }\n    return activeOption;\n  }\n\n  // Sync local state to parent props.\n  componentWillReceiveProps(nextProps) {\n    this.setState({activeOption: this.parseFlags(nextProps.activeOption)});\n  }\n\n  // Called whenever a checkbox is changed, this updates the local\n  // state to reflect the new activeOptions and then called props.onChange with\n  // the new options.\n  handleChange(newOptions) {\n    let newActiveOptions = '';\n\n    newOptions.map(option => {\n      if (option.checked === true) {\n        newActiveOptions += option.value + '+';\n      }\n    });\n\n    newActiveOptions = newActiveOptions.slice(0, -1);\n\n    if (newActiveOptions.length === 0) {\n      newActiveOptions = 'none';\n    }\n\n    this.setState({activeOption: newActiveOptions});\n    this.props.onChange(newActiveOptions);\n  }\n\n  // Turns the activeOptions \"e.g \"x+y+z\" into an array that\n  // the CheckboxGroup component can handle\n  renderCheckedOption() {\n    const activeOptions =\n      typeof this.state.activeOption === 'string'\n        ? this.state.activeOption.split('+')\n        : [this.state.activeOption];\n    const allOptions = this.props.options;\n    const newOptions = [];\n\n    allOptions.map(option => {\n      let currentChecked;\n\n      if (activeOptions.indexOf(option.value) > -1) {\n        currentChecked = true;\n      } else {\n        currentChecked = false;\n      }\n\n      newOptions.push({\n        label: option.label,\n        value: option.value,\n        checked: currentChecked,\n      });\n    });\n\n    return newOptions;\n  }\n\n  render() {\n    return (\n      <CheckboxGroup\n        options={this.renderCheckedOption()}\n        onChange={this.handleChange}\n        className={this.props.className}\n        orientation={this.props.orientation}\n      />\n    );\n  }\n}\n\nFlaglistCheckboxGroup.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.any.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  activeOption: PropTypes.any,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n  orientation: PropTypes.string,\n};\n\nexport default FlaglistCheckboxGroup;\n"],"file":"FlaglistCheckboxGroup.js"}