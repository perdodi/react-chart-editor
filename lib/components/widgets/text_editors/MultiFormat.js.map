{"version":3,"sources":["../../../../src/components/widgets/text_editors/MultiFormat.js"],"names":["MultiFormatTextEditor","props","context","_","localize","editors","key","label","component","RichTextEditor","LaTeXEditor","HTMLEditor","startTab","value","state","nextTab","currentTab","messages","onModeChange","bind","editor","defaultValuePattern","onChange","trimmedValue","trim","trimmedValueLength","length","convertedValue","convertValue","isDefaultValue","test","switchingBetweenRichAndHtml","setState","render","onCancel","onContinue","placeholder","richTextClassNames","selected","latexClassNames","bottomTabClassNames","Editor","filter","ModeTabsText","map","showBottomTab","BottomTab","toLowerCase","content","renderConfirmationPanel","renderEditor","Component","propTypes","PropTypes","instanceOf","RegExp","func","isRequired","string","defaultProps","contextTypes"],"mappings":"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","sourcesContent":["import HTMLEditor from './HTML';\nimport LaTeXEditor from './LaTeX';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport RichTextEditor from './RichText';\nimport {isLaTeXExpr, htmlToLaTeX, laTeXToHTML, hasTextExpression} from './convertFormats';\nimport classnames from 'classnames';\nimport Button from 'components/widgets/Button';\n\nclass MultiFormatTextEditor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    const _ = context.localize;\n\n    const editors = [\n      {\n        key: 'RICH_TEXT',\n        label: _('Rich Text'),\n        component: RichTextEditor,\n      },\n      {\n        key: 'LATEX',\n        label: _('LaTeX'),\n        component: LaTeXEditor,\n      },\n      {\n        key: 'HTML',\n        label: _('Edit in HTML'),\n        component: HTMLEditor,\n      },\n    ];\n\n    const startTab = isLaTeXExpr(props.value) ? 'LATEX' : 'RICH_TEXT';\n\n    this.state = {\n      /*\n       * When nextTab is set, we are waiting for confirmation from the\n       * user before switching to the next tab.\n       */\n      nextTab: null,\n      currentTab: startTab,\n      messages: [],\n    };\n\n    this.onModeChange = this.onModeChange.bind(this);\n    this.editors = editors;\n  }\n\n  /**\n   * Convert a value to the format expected by the provided editor.\n   *\n   * @param {String} value The current value\n   * @param {String} editor The editor to convert for [RICH_TEXT|LATEX]\n   * @returns {String} The converted value\n   */\n  convertValue(value, editor) {\n    const {currentTab} = this.state;\n\n    if (currentTab === 'RICH_TEXT' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    if (currentTab === 'LATEX' && editor === 'RICH_TEXT') {\n      return laTeXToHTML(value);\n    }\n\n    if (currentTab === 'HTML' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    /*\n     * Else we're switching from / to HTML / Rich Text Editor\n     * no conversion is needed\n     */\n    return value;\n  }\n\n  onModeChange(nextTab) {\n    const {localize: _} = this.context;\n    const {defaultValuePattern, value, onChange} = this.props;\n    const {currentTab} = this.state;\n    const trimmedValue = value.trim();\n    const trimmedValueLength = trimmedValue.length;\n    const convertedValue = this.convertValue(trimmedValue, nextTab);\n\n    /*\n     * Check against default value - we have to compare the plain\n     * value, not the LaTeX format value with `\\text{}` wrapping.\n     */\n    const isDefaultValue = isLaTeXExpr(trimmedValue)\n      ? defaultValuePattern.test(convertedValue)\n      : defaultValuePattern.test(trimmedValue);\n\n    const switchingBetweenRichAndHtml =\n      (currentTab === 'RICH_TEXT' && nextTab === 'HTML') ||\n      (currentTab === 'HTML' && nextTab === 'RICH_TEXT');\n\n    if (!isDefaultValue && trimmedValueLength > 0 && !switchingBetweenRichAndHtml) {\n      // Show confirmation dialogue and defer tab change.\n      let messages;\n\n      if (!isLaTeXExpr(value)) {\n        messages = [\n          _(\"LaTeX is a math typesetting language that doesn't work with rich text.\"),\n          _('Continuing will convert your note to LaTeX-style text.'),\n        ];\n      } else if (hasTextExpression(value)) {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will convert your LaTeX expression into raw text.'),\n        ];\n      } else {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will remove your expression.'),\n        ];\n      }\n\n      this.setState({\n        nextTab,\n        messages,\n      });\n\n      return;\n    }\n\n    // Show requested tab immediately.\n    this.setState({\n      currentTab: nextTab,\n    });\n\n    // Convert the annotation and dispatch onChange action\n    onChange(convertedValue);\n  }\n\n  renderConfirmationPanel(render) {\n    if (!render) {\n      return null;\n    }\n\n    const {localize: _} = this.context;\n    const {messages} = this.state;\n\n    const onCancel = () => {\n      this.setState({\n        nextTab: null,\n      });\n    };\n\n    const onContinue = () => {\n      const {nextTab} = this.state;\n      const {onChange, value} = this.props;\n\n      // Set next tab as active\n      this.setState({\n        currentTab: nextTab,\n        nextTab: null,\n      });\n\n      // Convert the annotation\n      const convertedValue = this.convertValue(value, nextTab);\n      onChange(convertedValue);\n    };\n\n    return (\n      <div className=\"multi-format-editor__confirmation-panel\">\n        <div className=\"multi-format-editor__confirmation-panel__content\">\n          <h3 className=\"multi-format-editor__confirmation-panel__header\">{_('Heads up!')}</h3>\n          <div className=\"multi-format-editor__confirmation-panel__message\">\n            <p className=\"multi-format-editor__confirmation-panel__message-primary\">\n              {messages[0]}\n            </p>\n            <p className=\"multi-format-editor__confirmation-panel__message-secondary\">\n              {messages[1]}\n            </p>\n          </div>\n        </div>\n        <div className=\"multi-format-editor__confirmation-panel__actions\">\n          <Button\n            variant=\"default\"\n            className=\"multi-format-editor__confirmation-panel__cancel-button\"\n            onClick={onCancel}\n          >\n            {_('Go back')}\n          </Button>\n          <Button\n            variant=\"primary\"\n            className=\"multi-format-editor__confirmation-panel__continue-button\"\n            onClick={onContinue}\n          >\n            {_('Continue')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  renderEditor(render) {\n    if (!render) {\n      return null;\n    }\n    const {localize: _} = this.context;\n    const {onChange, placeholder, value} = this.props;\n\n    const {currentTab} = this.state;\n\n    const richTextClassNames = classnames('multi-format-editor__tab', 'top-tab', 'left', {\n      selected: currentTab === 'RICH_TEXT',\n    });\n    const latexClassNames = classnames('multi-format-editor__tab', 'top-tab', 'right', {\n      selected: currentTab === 'LATEX',\n    });\n    const bottomTabClassNames = classnames('multi-format-editor__tab', 'bottom-tab');\n\n    const Editor = this.editors.filter(editor => editor.key === currentTab)[0].component;\n\n    const ModeTabsText = this.editors.map(editor => editor.label);\n\n    const showBottomTab = currentTab === 'HTML' || currentTab === 'RICH_TEXT';\n    const BottomTab =\n      currentTab === 'HTML' ? (\n        <div className={bottomTabClassNames} onClick={() => this.onModeChange('RICH_TEXT')}>\n          {_('Edit in Rich Text')}\n        </div>\n      ) : (\n        <div className={bottomTabClassNames} onClick={() => this.onModeChange('HTML')}>\n          {_('Edit in HTML')}\n        </div>\n      );\n\n    return (\n      <div className=\"multi-format-editor__root__wrapper\">\n        <div className=\"multi-format-editor__tabs\">\n          <div className={richTextClassNames} onClick={() => this.onModeChange('RICH_TEXT')}>\n            {ModeTabsText[0]}\n          </div>\n          <div className={latexClassNames} onClick={() => this.onModeChange('LATEX')}>\n            {ModeTabsText[1]}\n          </div>\n        </div>\n        <div className={`multi-format-editor__content__wrapper__${currentTab.toLowerCase()}`}>\n          <Editor\n            className={`multi-format-editor__${currentTab.toLowerCase()}`}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n        </div>\n        {showBottomTab ? BottomTab : null}\n      </div>\n    );\n  }\n\n  render() {\n    /*\n     * `renderConfirmationPanel` and `renderEditor` are mutually\n     * exclusive; only one will return a component.\n     */\n    const {nextTab} = this.state;\n    const content =\n      this.renderConfirmationPanel(nextTab !== null) || this.renderEditor(nextTab === null);\n\n    return <div className=\"multi-format-editor__root\">{content}</div>;\n  }\n}\n\nMultiFormatTextEditor.propTypes = {\n  defaultValuePattern: PropTypes.instanceOf(RegExp),\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n};\n\nMultiFormatTextEditor.defaultProps = {\n  defaultValuePattern: /^$/,\n  placeholder: '',\n  value: '',\n};\n\nMultiFormatTextEditor.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default MultiFormatTextEditor;\n"],"file":"MultiFormat.js"}