{"version":3,"sources":["../../../../../src/components/widgets/text_editors/RichText/DraftCommands.js"],"names":["selectionHasLink","editorState","selection","isCollapsed","cursorHasLink","entity","getEntityByKey","getEntityKeyAt","Boolean","get","LINK","entityKey","Entity","blockStartKey","getStartKey","selectionOffset","getStartOffset","contentState","getCurrentContent","block","getBlockForKey","getEntityAt","handleKeyCommand","command","insertSoftNewline","toggleInlineStyle","BOLD","ITALIC","newEditorState","currentStyleSet","getCurrentInlineStyle","reduce","reducedEditorState","style","RichUtils","selectionState","getSelection","selectionStart","selectionEnd","getEndOffset","EditorState","push","inlineStyle","toggleLink","updatedEditorState","toggleMutuallyExclusiveStyles","create","url","SUBSCRIPT","includes","SUPERSCRIPT"],"mappings":"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","sourcesContent":["/*\n * This module exports functions that act on a DraftJS EditorState to\n * effect commands.\n */\n\nimport {\n  EditorState,\n  Entity,\n  RichUtils,\n\n  // Note: disable eslint cause SelectionState is mentioned quite often in JSDoc\n  // eslint-disable-next-line no-unused-vars\n  SelectionState,\n} from 'draft-js';\nimport {removeRange} from 'draft-js/lib/DraftModifier';\n\nimport {BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, LINK} from './configuration';\n\n/**\n * Check whether the current selection is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if selection is over a link\n */\nfunction selectionHasLink(editorState, selection) {\n  // If nothing is selected, bail early.\n  if (selection.isCollapsed()) {\n    return false;\n  }\n\n  return cursorHasLink(editorState, selection);\n}\n\n/**\n * Check whether the cursor position is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if cursor is over a link\n */\nexport function cursorHasLink(editorState, selection) {\n  const entity = getEntityByKey(getEntityKeyAt(editorState, selection));\n\n  return Boolean(entity && entity.get('type') === LINK);\n}\n\n/**\n * Get an entity by its key\n * Links are represented as DraftJS entities.\n * https://facebook.github.io/draft-js/docs/api-reference-entity.html#content\n *\n * @param   {String} entityKey    The entity key\n * @returns {DraftEntityInstance} The entity for the key, or `null` if not found\n */\nexport function getEntityByKey(entityKey) {\n  if (!entityKey) {\n    return null;\n  }\n\n  return Entity.get(entityKey);\n}\n\n/**\n * For a given SelectionState, get the underlying entity key.\n *\n * @param   {EditorState} editorState  The DraftJS editor state\n * @param   {SelectionState} selection The DraftJS selection state\n * @returns {String}                   The entity key, or `null` if not found\n */\nexport function getEntityKeyAt(editorState, selection) {\n  if (!selection) {\n    return null;\n  }\n\n  const blockStartKey = selection.getStartKey();\n  const selectionOffset = selection.getStartOffset();\n\n  const contentState = editorState.getCurrentContent();\n  const block = contentState.getBlockForKey(blockStartKey);\n\n  return block.getEntityAt(selectionOffset);\n}\n\n/**\n * Handle a keyboard command.\n * TODO: add custom CMD-k command for link button.\n * https://github.com/plotly/streambed/issues/6384\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} command          The command string representation\n * @returns {EditorState}             The new editor state\n */\nexport function handleKeyCommand(editorState, command) {\n  switch (command) {\n    case 'split-block':\n      // Never split editor content into `<p>` blocks.\n      return insertSoftNewline(editorState);\n    case 'bold':\n      return toggleInlineStyle(editorState, BOLD);\n    case 'italic':\n      return toggleInlineStyle(editorState, ITALIC);\n    default:\n      return false;\n  }\n}\n\n/**\n * Insert a soft newline `\\n` that converts to `<br>` in HTML.\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function insertSoftNewline(editorState) {\n  let newEditorState = editorState;\n\n  // Terminate all current inline styles\n  const currentStyleSet = newEditorState.getCurrentInlineStyle();\n  newEditorState = currentStyleSet.reduce(\n    (reducedEditorState, style) => RichUtils.toggleInlineStyle(reducedEditorState, style),\n    newEditorState\n  );\n\n  // If text is selected, delete text first.\n  const selectionState = newEditorState.getSelection();\n  const selectionStart = selectionState.getStartOffset();\n  const selectionEnd = selectionState.getEndOffset();\n\n  if (selectionEnd - selectionStart !== 0) {\n    const contentState = removeRange(newEditorState.getCurrentContent(), selectionState, 'back');\n\n    newEditorState = EditorState.push(newEditorState, contentState, 'backspace-character');\n  }\n\n  // Insert a newline\n  return RichUtils.insertSoftNewline(newEditorState);\n}\n\n/**\n * Toggle an inline style on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} inlineStyle      The inline style string representation\n * @returns {EditorState}             The new editor state\n */\nexport function toggleInlineStyle(editorState, inlineStyle) {\n  /*\n   * TODO tech-debt. Link toggles should not go via toggleInlineStyle.\n   * https://github.com/plotly/streambed/issues/6354\n   */\n\n  if (inlineStyle === LINK) {\n    return toggleLink(editorState);\n  }\n\n  // <sub> and <sup> should be mutually exclusive.\n  const updatedEditorState = toggleMutuallyExclusiveStyles(editorState, inlineStyle);\n\n  // Add the new style.\n  return RichUtils.toggleInlineStyle(updatedEditorState, inlineStyle);\n}\n\n/**\n * Toggle a link on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function toggleLink(editorState) {\n  const selection = editorState.getSelection();\n\n  if (selectionHasLink(editorState, selection)) {\n    // Remove link\n    return RichUtils.toggleLink(editorState, selection, null);\n  }\n\n  // Create a link with an empty URL\n  const entityKey = Entity.create(LINK, 'MUTABLE', {url: ''});\n\n  return RichUtils.toggleLink(editorState, selection, entityKey);\n}\n\n/**\n * For the current selection, if a SUPERSCRIPT or SUBSCRIPT style is\n * to be applied, un-apply the other style.\n *\n * @param {EditorState} editorState The DraftJS editor state\n * @param {String} inlineStyle      Style about to be applied\n * @returns {EditorState}           The new editor state\n */\nexport function toggleMutuallyExclusiveStyles(editorState, inlineStyle) {\n  const currentStyleSet = editorState.getCurrentInlineStyle();\n\n  if (inlineStyle === SUBSCRIPT && currentStyleSet.includes(SUPERSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUPERSCRIPT);\n  }\n\n  if (inlineStyle === SUPERSCRIPT && currentStyleSet.includes(SUBSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUBSCRIPT);\n  }\n\n  return editorState;\n}\n"],"file":"DraftCommands.js"}