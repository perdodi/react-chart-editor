{"version":3,"sources":["../../../../../src/components/widgets/text_editors/RichText/index.js"],"names":["RichText","props","context","state","editorState","value","toString","trim","length","createEditorStateFromHTML","EditorState","createEmpty","getDecorator","bind","getEditorStateAsHTML","focus","getParentContainerVerticalOffset","onChange","onBlur","onFocus","onLinkEditorBlur","onLinkEditorFocus","onLinkEditorChange","onLinkEditorClose","onKeyCommand","onReturnPressed","onStyleButtonToggle","renderLinkEditor","nextProps","linkEditorFocus","editorFocus","setState","nextState","placeholder","CompositeDecorator","strategy","findLinkEntities","component","LinkDecorator","style","STYLE_MAP","LINK","html","contentState","inlineStyles","SUPERSCRIPT","element","SUBSCRIPT","defaultBlockTag","decorator","createWithContent","getCurrentContent","STYLES_TO_HTML_TAGS","editorInput","document","querySelector","scrollTop","selectedLinkID","selection","getSelection","entityKey","newState","Object","assign","htmlContent","replace","linkID","urlValue","selectionState","Entity","replaceData","url","updatedEditorState","RichUtils","toggleLink","command","newEditorState","inlineStyle","linkEntity","linkURL","getData","coordinates","linkIsSelected","Boolean","INLINE_STYLES","getCurrentInlineStyle","input","Component","propTypes","PropTypes","func","isRequired","string","any","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {CompositeDecorator, Editor, EditorState, Entity, RichUtils} from 'draft-js';\nimport {stateToHTML} from '@plotly/draft-js-export-html';\nimport {stateFromHTML} from 'draft-js-import-html';\n\n// Constants\nimport {\n  SUPERSCRIPT,\n  SUBSCRIPT,\n  LINK,\n  STYLES_TO_HTML_TAGS,\n  STYLE_MAP,\n  INLINE_STYLES,\n} from './configuration';\n\n// Components\nimport LinkDecorator from './LinkDecorator';\nimport LinkEditor from './LinkEditor';\nimport StyleButtonGroup from './StyleButtonGroup';\n\n// Libraries\nimport debounce from './debounce';\nimport {\n  getEntityKeyAt,\n  getEntityByKey,\n  toggleInlineStyle,\n  handleKeyCommand,\n  insertSoftNewline,\n  cursorHasLink,\n} from './DraftCommands';\nimport {findLinkEntities} from './decoratorStrategies';\nimport getCoordinates from './getSelectionCoordinates';\n\nclass RichText extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    /*\n     * Initially set state based on the plotly.js annotation content.\n     * After this, as long as this component is mounted, it owns the source\n     * of truth for the annotation value via `this.state.editorState`.\n     * This state may be updated externally via a prop update.\n     * See `componentWillReceiveProps`.\n     */\n    this.state = {\n      editorState: props.value.toString().trim().length\n        ? this.createEditorStateFromHTML(props.value)\n        : EditorState.createEmpty(this.getDecorator()),\n    };\n\n    this.getDecorator = this.getDecorator.bind(this);\n    this.createEditorStateFromHTML = this.createEditorStateFromHTML.bind(this);\n    this.getEditorStateAsHTML = this.getEditorStateAsHTML.bind(this);\n    this.focus = this.focus.bind(this);\n    this.getParentContainerVerticalOffset = this.getParentContainerVerticalOffset.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onLinkEditorBlur = this.onLinkEditorBlur.bind(this);\n    this.onLinkEditorFocus = this.onLinkEditorFocus.bind(this);\n    this.onLinkEditorChange = this.onLinkEditorChange.bind(this);\n    this.onLinkEditorClose = this.onLinkEditorClose.bind(this);\n    this.onKeyCommand = this.onKeyCommand.bind(this);\n    this.onReturnPressed = this.onReturnPressed.bind(this);\n    this.onStyleButtonToggle = this.onStyleButtonToggle.bind(this);\n    this.renderLinkEditor = this.renderLinkEditor.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {linkEditorFocus, editorFocus} = this.state;\n\n    /*\n     * Don't worry about what plotly.js thinks the annotation value\n     * should be while we're using our editor, for these reasons:\n     *\n     * 1. The editor should be considered the source of truth, unless the\n     *    user is actually editing the annotation inline, in the chart.\n     * 2. Sometimes we get updates with stale values.\n     */\n    if (linkEditorFocus || editorFocus) {\n      return;\n    }\n\n    // Sync editor state with plotly annotation value.\n    const editorState = this.createEditorStateFromHTML(nextProps.value);\n\n    this.setState({editorState});\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {placeholder, value} = this.props;\n    const {editorState, linkEditorFocus} = this.state;\n\n    // If relevant props or state changed, return true.\n    if (\n      // Always update when user is editing link\n      linkEditorFocus ||\n      placeholder !== nextProps.placeholder ||\n      value !== nextProps.value ||\n      editorState !== nextState.editorState\n    ) {\n      return true;\n    }\n\n    // Compare incoming value with HTML representation of state.\n    return nextProps.value !== this.getEditorStateAsHTML(editorState);\n  }\n\n  getDecorator() {\n    return new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: LinkDecorator,\n\n        // Props for the LinkDecorator component\n        props: {\n          style: STYLE_MAP[LINK],\n        },\n      },\n    ]);\n  }\n\n  createEditorStateFromHTML(html) {\n    const contentState = stateFromHTML(html, {\n      inlineStyles: {\n        [SUPERSCRIPT]: {element: 'sup'},\n        [SUBSCRIPT]: {element: 'sub'},\n      },\n      defaultBlockTag: null,\n    });\n\n    const decorator = this.getDecorator();\n\n    /*\n     * Work around issue described here:\n     * https://github.com/facebook/draft-js/issues/185\n     * #issuecomment-217207612\n     */\n\n    // Parse once to generate entity instances\n    EditorState.createWithContent(contentState);\n\n    // Now we can add our decorator\n    return EditorState.createWithContent(contentState, decorator);\n  }\n\n  getEditorStateAsHTML(editorState) {\n    const contentState = editorState.getCurrentContent();\n\n    return stateToHTML(contentState, {\n      defaultBlockTag: null,\n      inlineStyles: STYLES_TO_HTML_TAGS,\n    });\n  }\n\n  focus() {\n    this.editorInput.focus();\n  }\n\n  // Used to properly calculate user selection coordinates.\n  getParentContainerVerticalOffset() {\n    return document.querySelector('.panel').scrollTop;\n  }\n\n  onChange(editorState) {\n    const {selectedLinkID} = this.state;\n    const selection = editorState.getSelection();\n    const entityKey = getEntityKeyAt(editorState, selection);\n\n    const newState = {editorState};\n\n    // Update selected link ID\n    if (!cursorHasLink(editorState, selection)) {\n      // If a link is no longer selected, clear selected link ID state\n      Object.assign(newState, {\n        selectedLinkID: null,\n      });\n    } else if (selectedLinkID !== entityKey) {\n      // If link selection is new / different link selected, update it\n      Object.assign(newState, {\n        selectedLinkID: entityKey,\n      });\n    }\n\n    // Update internal state\n    this.setState(newState);\n\n    // Dispatch changes to plotly.js\n    // TODO consider moving to render (plotly.js is a render target)\n    const htmlContent = this.getEditorStateAsHTML(editorState).replace(/<br>\\n*/, '<br>');\n    if (this.props.value !== htmlContent) {\n      debounce(this.props.onChange, [htmlContent]);\n    }\n  }\n\n  onBlur() {\n    this.setState({\n      editorFocus: false,\n    });\n  }\n\n  onFocus() {\n    this.setState({\n      editorFocus: true,\n    });\n  }\n\n  onLinkEditorBlur() {\n    this.setState({\n      linkEditorFocus: false,\n    });\n  }\n\n  onLinkEditorFocus() {\n    this.setState({\n      linkEditorFocus: true,\n    });\n  }\n\n  onLinkEditorChange(linkID, urlValue) {\n    const {editorState} = this.state;\n    const selectionState = editorState.getSelection();\n\n    // Update link URL\n    Entity.replaceData(linkID, {url: urlValue});\n\n    // Trigger an editor state update\n    const updatedEditorState = RichUtils.toggleLink(editorState, selectionState, linkID);\n\n    this.onChange(updatedEditorState);\n  }\n\n  /**\n   * Will be called by LinkEditor when the user confirms or cancels new URL.\n   * Will not be called if LinkEditor is closed by moving the cursor off of\n   * the selected LINK entity.\n   *\n   * @param   {String} linkID The link entity key related to this LinkEditor\n   * @returns {undefined}\n   */\n  onLinkEditorClose() {\n    /*\n     * Focus on editor immediately to avoid error that occurs when\n     * `selection.extend` is called and another element has focus.\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=921444\n     * https://github.com/facebook/draft-js/blob/342576bf7186d07c82a41d9ca8169130669747d6/src/component/selection/setDraftEditorSelection.js#L128-L134\n     */\n    this.focus();\n\n    // Hide the editor.\n    this.setState({\n      linkEditorFocus: false,\n      selectedLinkID: null,\n    });\n  }\n\n  onKeyCommand(command) {\n    const newEditorState = handleKeyCommand(this.state.editorState, command);\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n\n      // Let draft-js know that keyboard command is handled.\n      return true;\n    }\n\n    // Default draft-js implementation\n    return false;\n  }\n\n  onReturnPressed() {\n    const newEditorState = insertSoftNewline(this.state.editorState);\n\n    // Update internal and external state\n    this.onChange(newEditorState);\n\n    // Cancel draft-js implementation\n    return true;\n  }\n\n  onStyleButtonToggle(inlineStyle) {\n    const newEditorState = toggleInlineStyle(this.state.editorState, inlineStyle);\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n    }\n  }\n\n  renderLinkEditor(selectedLinkID) {\n    if (!selectedLinkID) {\n      return null;\n    }\n\n    // All entities are link entities.\n    const linkEntity = getEntityByKey(selectedLinkID);\n    const linkURL = linkEntity.getData().url;\n\n    const coordinates = getCoordinates();\n\n    return (\n      <LinkEditor\n        onFocus={this.onLinkEditorFocus}\n        onURLChange={this.onLinkEditorChange}\n        onBlur={this.onLinkEditorBlur}\n        onClose={this.onLinkEditorClose}\n        coordinates={coordinates}\n        linkID={selectedLinkID}\n        linkURL={linkURL}\n      />\n    );\n  }\n\n  render() {\n    const {editorState, selectedLinkID} = this.state;\n    const linkIsSelected = Boolean(selectedLinkID);\n\n    return (\n      <div className=\"rich-text-editor__root\">\n        <StyleButtonGroup\n          styles={INLINE_STYLES}\n          currentStyle={editorState.getCurrentInlineStyle()}\n          linkIsSelected={linkIsSelected}\n          onToggle={this.onStyleButtonToggle}\n        />\n        <div className=\"rich-text-editor__editor\" onClick={this.focus}>\n          <Editor\n            customStyleMap={STYLE_MAP}\n            editorState={editorState}\n            handleReturn={this.onReturnPressed}\n            handleKeyCommand={this.onKeyCommand}\n            onChange={this.onChange}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            placeholder={this.props.placeholder}\n            spellCheck={false}\n            ref={input => (this.editorInput = input)}\n          />\n        </div>\n        {this.renderLinkEditor(selectedLinkID)}\n      </div>\n    );\n  }\n}\n\nRichText.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.any,\n};\n\nRichText.defaultProps = {\n  placeholder: '',\n  value: '',\n};\n\nexport default RichText;\n"],"file":"index.js"}