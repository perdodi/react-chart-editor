{"version":3,"sources":["../../../src/components/fields/DualNumeric.js"],"names":["UnconnectedDualNumericFraction","props","context","updatePlot","bind","updatePlot2","value","percentage","updateContainer","attr2","multiValued","step","min","max","fullValue","Math","round","fullValue2","fullContainer","get","placeholder","placeholder2","defaultValue","hideArrows","Component","propTypes","PropTypes","any","number","bool","showSlider","func","Field","contextTypes","object","displayName"],"mappings":"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","sourcesContent":["import Field from './Field';\nimport NumericInput from '../widgets/NumericInput';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectToContainer} from 'lib';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\n\nexport class UnconnectedDualNumericFraction extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.updatePlot = this.updatePlot.bind(this);\n    this.updatePlot2 = this.updatePlot2.bind(this);\n  }\n\n  updatePlot(value) {\n    this.props.updatePlot(this.props.percentage ? value / 100 : value);\n  }\n\n  updatePlot2(value) {\n    this.props.updateContainer({\n      [this.props.attr2]: this.props.percentage ? value / 100 : value,\n    });\n  }\n\n  render() {\n    const {percentage, multiValued, attr2, step, min, max} = this.props;\n    let fullValue = percentage ? Math.round(100 * this.props.fullValue) : this.props.fullValue;\n    let fullValue2 = nestedProperty(this.context.fullContainer, attr2).get();\n    if (percentage) {\n      fullValue2 = Math.round(100 * fullValue2);\n    }\n    let placeholder;\n    let placeholder2;\n    if (multiValued) {\n      placeholder = fullValue;\n      placeholder2 = fullValue2;\n      fullValue = '';\n      fullValue2 = '';\n    }\n\n    return (\n      <Field {...this.props}>\n        <div className=\"numeric-input__wrapper\">\n          <NumericInput\n            value={fullValue}\n            defaultValue={this.props.defaultValue}\n            placeholder={placeholder}\n            step={step}\n            min={min}\n            max={max}\n            onChange={this.updatePlot}\n            onUpdate={this.updatePlot}\n            showArrows={!this.props.hideArrows}\n            showSlider={false}\n          />\n          <NumericInput\n            value={fullValue2}\n            defaultValue={this.props.defaultValue}\n            placeholder={placeholder2}\n            step={step}\n            min={min}\n            max={max}\n            onChange={this.updatePlot2}\n            onUpdate={this.updatePlot2}\n            showArrows={!this.props.hideArrows}\n            showSlider={false}\n          />\n        </div>\n      </Field>\n    );\n  }\n}\n\nUnconnectedDualNumericFraction.propTypes = {\n  defaultValue: PropTypes.any,\n  fullValue: PropTypes.any,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  multiValued: PropTypes.bool,\n  hideArrows: PropTypes.bool,\n  showSlider: PropTypes.bool,\n  step: PropTypes.number,\n  updatePlot: PropTypes.func,\n  attr2: PropTypes.any,\n  percentage: PropTypes.bool,\n  ...Field.propTypes,\n};\n\nUnconnectedDualNumericFraction.contextTypes = {\n  fullContainer: PropTypes.object,\n};\n\nUnconnectedDualNumericFraction.displayName = 'UnconnectedDualNumericFraction';\n\nexport default connectToContainer(UnconnectedDualNumericFraction);\n"],"file":"DualNumeric.js"}