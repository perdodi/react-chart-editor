{"version":3,"sources":["../../../src/components/fields/AxesCreator.js"],"names":["UnconnectedAxisCreator","currentAxisId","props","fullContainer","attr","currentTraceIndex","index","context","fullData","some","d","updateContainer","onUpdate","subplots","fullLayout","_subplots","lastAxisNumber","Number","length","charAt","side","type","EDITOR_ACTIONS","UPDATE_LAYOUT","payload","update","axesToBeGarbageCollected","trace","push","UPDATE_TRACES","traceIndexes","icon","extraComponent","canAddAxis","addAndUpdateAxis","label","options","u","updateAxis","Component","propTypes","PropTypes","string","array","container","object","func","contextTypes","data","AxisCreator","UnconnectedAxesCreator","axisType","isFirstTraceOfAxisType","filter","_","localize","controls","getOptions","map","axisId","meta","value","forEach","toUpperCase","setPanel","modifyPlotProps","plotProps","isVisible"],"mappings":"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","sourcesContent":["import Dropdown from './Dropdown';\nimport Info from './Info';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport Button from '../widgets/Button';\nimport {PlusIcon} from 'plotly-icons';\nimport {\n  connectToContainer,\n  traceTypeToAxisType,\n  getAxisTitle,\n  axisIdToAxisName,\n  getParsedTemplateString,\n} from 'lib';\nimport {PlotlySection} from 'components';\n\nclass UnconnectedAxisCreator extends Component {\n  canAddAxis() {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const currentTraceIndex = this.props.fullContainer.index;\n    return this.context.fullData.some(\n      d => d.index !== currentTraceIndex && d[this.props.attr] === currentAxisId\n    );\n  }\n\n  addAndUpdateAxis() {\n    const {attr, updateContainer} = this.props;\n    const {\n      onUpdate,\n      fullLayout: {_subplots: subplots},\n    } = this.context;\n    const lastAxisNumber = Number(subplots[attr][subplots[attr].length - 1].charAt(1)) || 1;\n\n    updateContainer({\n      [attr]: attr.charAt(0) + (lastAxisNumber + 1),\n    });\n\n    let side = null;\n    if (attr === 'yaxis') {\n      side = 'right';\n    } else if (attr === 'xaxis') {\n      side = 'top';\n    }\n\n    onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n      payload: {\n        update: {\n          [`${attr + (lastAxisNumber + 1)}.side`]: side,\n          [`${attr + (lastAxisNumber + 1)}.overlaying`]: !(attr === 'yaxis' || attr === 'xaxis')\n            ? null\n            : subplots[attr][subplots[attr].length - 1],\n        },\n      },\n    });\n  }\n\n  updateAxis(update) {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const axesToBeGarbageCollected = [];\n\n    // When we select another axis, make sure no unused axes are left\n    if (\n      currentAxisId !== update &&\n      !this.context.fullData.some(\n        trace =>\n          trace[this.props.attr] === currentAxisId && trace.index !== this.props.fullContainer.index\n      )\n    ) {\n      axesToBeGarbageCollected.push(currentAxisId);\n    }\n\n    this.context.onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_TRACES,\n      payload: {\n        axesToBeGarbageCollected,\n        update: {[this.props.attr]: update},\n        traceIndexes: [this.props.fullContainer.index],\n      },\n    });\n  }\n\n  render() {\n    const icon = <PlusIcon />;\n    const extraComponent = this.canAddAxis() ? (\n      <Button variant=\"no-text\" icon={icon} onClick={() => this.addAndUpdateAxis()} />\n    ) : (\n      <Button variant=\"no-text--disabled\" icon={icon} onClick={() => {}} />\n    );\n\n    return (\n      <Dropdown\n        label={this.props.label}\n        attr={this.props.attr}\n        clearable={false}\n        options={this.props.options}\n        updatePlot={u => this.updateAxis(u)}\n        extraComponent={extraComponent}\n      />\n    );\n  }\n}\n\nUnconnectedAxisCreator.propTypes = {\n  attr: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n  updateContainer: PropTypes.func,\n};\n\nUnconnectedAxisCreator.contextTypes = {\n  fullLayout: PropTypes.object,\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  onUpdate: PropTypes.func,\n};\n\nconst AxisCreator = connectToContainer(UnconnectedAxisCreator);\n\nclass UnconnectedAxesCreator extends Component {\n  render() {\n    const axisType = traceTypeToAxisType(this.props.container.type);\n    const isFirstTraceOfAxisType =\n      this.context.data.filter(d => traceTypeToAxisType(d.type) === axisType).length === 1;\n\n    if (isFirstTraceOfAxisType) {\n      return null;\n    }\n\n    const {fullLayout, localize: _} = this.context;\n    const controls = [];\n\n    function getOptions(axisType) {\n      return fullLayout._subplots[axisType].map(axisId => ({\n        label: getParsedTemplateString(getAxisTitle(fullLayout[axisIdToAxisName(axisId)]), {\n          meta: fullLayout.meta,\n        }),\n        value: axisId,\n      }));\n    }\n\n    if (axisType === 'cartesian') {\n      ['xaxis', 'yaxis'].forEach((type, index) => {\n        controls.push(\n          <AxisCreator\n            key={index}\n            attr={type}\n            label={type.charAt(0).toUpperCase() + _(' Axis')}\n            options={getOptions(type)}\n          />\n        );\n      });\n    }\n\n    return (\n      <PlotlySection name={_('Axes to Use')}>\n        {controls}\n        <Info>\n          {_('You can style and position your axes in the ')}\n          <a onClick={() => this.context.setPanel('Structure', 'Subplots')}>{_('Subplots')}</a>\n          {_(' panel.')}\n        </Info>\n      </PlotlySection>\n    );\n  }\n}\n\nUnconnectedAxesCreator.propTypes = {\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n};\n\nUnconnectedAxesCreator.contextTypes = {\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n  localize: PropTypes.func,\n  setPanel: PropTypes.func,\n};\n\nexport default connectToContainer(UnconnectedAxesCreator, {\n  modifyPlotProps: (props, context, plotProps) => {\n    const {data} = context;\n    const {fullContainer} = plotProps;\n\n    plotProps.isVisible =\n      data.length > 1 &&\n      data[fullContainer.index] &&\n      traceTypeToAxisType(data[fullContainer.index].type) === 'cartesian';\n  },\n});\n"],"file":"AxesCreator.js"}