{"version":3,"sources":["../../../../src/components/fields/__tests__/DataSelector-test.js"],"names":["render","overrides","children","attr","props","editorProps","fixtures","scatter","onUpdate","jest","fn","plotly","find","last","describe","it","dataSources","wrapper","DropdownWidget","expect","prop","toEqual","label","value","toBe","beforeUpdateTraces","mockClear","mock","calls","update","xsrc","x","traceIndexes","exists","pie","TraceDataSelector","DataSelector","text","toContain"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,MAAT,GAA0C;AAAA,MAA1BC,SAA0B,uEAAd,EAAc;AAAA,MAAVC,QAAU;;AAAA,wBACTD,SADS,CACjCE,IADiC;AAAA,MACjCA,IADiC,gCAC1B,GAD0B;AAAA,MAClBC,KADkB,4BACTH,SADS;;AAExC,MAAMI,WAAW,qBAAOC,oBAASC,OAAT,EAAP;AAA2BC,IAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL;AAArC,KAAmDN,KAAnD,CAAjB,CAFwC,CAIxC;;;AACA,SAAO,mBACL,6BAAC,qBAAD,eAAgBC,WAAhB;AAA6B,IAAA,MAAM,EAAEM;AAArC,MACGT,QADH,CADK,EAKJU,IALI,mBAKWT,IALX,UAMJU,IANI,EAAP;AAOD;;AAEDC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAAA,4BAC5BT,oBAASC,OAAT,EAD4B;AAAA,QAC3CS,WAD2C,qBAC3CA,WAD2C;;AAElD,QAAMC,OAAO,GAAGjB,MAAM,CAAC;AAACgB,MAAAA,WAAW,EAAXA;AAAD,KAAD,CAAN,CAAsBJ,IAAtB,CAA2BM,iBAA3B,CAAhB;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACG,IAAR,CAAa,SAAb,CAAD,CAAN,CAAgCC,OAAhC,CAAwC,CACtC;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KADsC,EAEtC;AAACD,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KAFsC,EAGtC;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAHsC,CAAxC;AAKD,GARC,CAAF;AAUAR,EAAAA,EAAE,CAAC,0DAAD,EAA6D,YAAM;AACnE,QAAME,OAAO,GAAGjB,MAAM,GAAGY,IAAT,CAAcM,iBAAd,CAAhB;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACG,IAAR,CAAa,OAAb,CAAD,CAAN,CAA8BI,IAA9B,CAAmC,IAAnC;AACD,GAHC,CAAF,CAX6B,CAgB7B;;AACAT,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM,CAAE,CAAlE,CAAF;AAEAA,EAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAM;AAC9D,QAAMU,kBAAkB,GAAGhB,IAAI,CAACC,EAAL,EAA3B;AACA,QAAMO,OAAO,GAAGjB,MAAM,CAAC;AAACyB,MAAAA,kBAAkB,EAAlBA;AAAD,KAAD,CAAN,CAA6Bb,IAA7B,CAAkCM,iBAAlC,CAAhB;AACAO,IAAAA,kBAAkB,CAACC,SAAnB;AACAT,IAAAA,OAAO,CAACG,IAAR,CAAa,UAAb,EAAyB,IAAzB;AACAD,IAAAA,MAAM,CAACM,kBAAkB,CAACE,IAAnB,CAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,CAAD,CAAN,CAA4CP,OAA5C,CAAoD;AAClDQ,MAAAA,MAAM,EAAE;AAAC,8BAAsB,MAAvB;AAA+BC,QAAAA,IAAI,EAAE,IAArC;AAA2CC,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA9C,OAD0C;AAElDC,MAAAA,YAAY,EAAE,CAAC,CAAD;AAFoC,KAApD;AAID,GATC,CAAF;AAWAjB,EAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,QAAIE,OAAO,GAAGjB,MAAM,GAAGY,IAAT,CAAcM,iBAAd,CAAd;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACgB,MAAR,EAAD,CAAN,CAAyBT,IAAzB,CAA8B,IAA9B;AAEAP,IAAAA,OAAO,GAAGjB,MAAM,mBAAKM,oBAAS4B,GAAT,EAAL;AAAqB/B,MAAAA,IAAI,EAAE;AAA3B,OAAN,CAAuCS,IAAvC,CAA4CM,iBAA5C,CAAV;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACgB,MAAR,EAAD,CAAN,CAAyBT,IAAzB,CAA8B,KAA9B;AACD,GANC,CAAF;AAQAT,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,QAAMoB,iBAAiB,GAAG,iCAAmBC,qBAAnB,CAA1B;AACA,QAAMnB,OAAO,GAAGjB,MAAM,CACpB,EADoB,EAEpB,6BAAC,iBAAD;AAAmB,MAAA,YAAY,EAAE,CAAC,CAAD,CAAjC;AAAsC,MAAA,KAAK,EAAE;AAACkC,QAAAA,GAAG,EAAE,OAAN;AAAe,aAAK;AAApB,OAA7C;AAA2E,MAAA,IAAI,EAAC;AAAhF,MAFoB,CAAtB;AAIAf,IAAAA,MAAM,CAACF,OAAO,CAACL,IAAR,CAAa,oBAAb,EAAmCyB,IAAnC,EAAD,CAAN,CAAkDC,SAAlD,CAA4D,OAA5D;AACD,GAPC,CAAF;AAQD,CA9CO,CAAR","sourcesContent":["/* eslint-disable no-magic-numbers*/\nimport DataSelector from '../DataSelector';\nimport DropdownWidget from '../../widgets/Dropdown';\nimport React from 'react';\nimport {TestEditor, fixtures, plotly} from 'lib/test-utils';\nimport connectTraceToPlot from 'lib/connectTraceToPlot';\nimport {mount} from 'enzyme';\n\nfunction render(overrides = {}, children) {\n  const {attr = 'x', ...props} = overrides;\n  const editorProps = {...fixtures.scatter(), onUpdate: jest.fn(), ...props};\n\n  // return the inner-most plot connected dropdown (last)\n  return mount(\n    <TestEditor {...editorProps} plotly={plotly}>\n      {children}\n    </TestEditor>\n  )\n    .find(`[attr=\"${attr}\"]`)\n    .last();\n}\n\ndescribe('DataSelector', () => {\n  it('contains options defined by dataSources', () => {\n    const {dataSources} = fixtures.scatter();\n    const wrapper = render({dataSources}).find(DropdownWidget);\n    expect(wrapper.prop('options')).toEqual([\n      {label: 'xCol', value: 'x1'},\n      {label: 'yCol', value: 'y1'},\n      {label: 'yCol2', value: 'y2'},\n    ]);\n  });\n\n  it('uses gd.data dataSrc value not fullValue when data_array', () => {\n    const wrapper = render().find(DropdownWidget);\n    expect(wrapper.prop('value')).toBe('x1');\n  });\n\n  // arrayOk not implemented in defaultEditor yet\n  it('uses gd.data dataSrc value not fullValue when arrayOk', () => {});\n\n  it('calls updatePlot with srcAttr and data when present', () => {\n    const beforeUpdateTraces = jest.fn();\n    const wrapper = render({beforeUpdateTraces}).find(DropdownWidget);\n    beforeUpdateTraces.mockClear();\n    wrapper.prop('onChange')('y1');\n    expect(beforeUpdateTraces.mock.calls[0][0]).toEqual({\n      update: {'meta.columnNames.x': 'yCol', xsrc: 'y1', x: [2, 3, 4]},\n      traceIndexes: [1],\n    });\n  });\n\n  it('is invisible when a data src does not exist for trace type', () => {\n    let wrapper = render().find(DropdownWidget);\n    expect(wrapper.exists()).toBe(true);\n\n    wrapper = render({...fixtures.pie(), attr: 'x'}).find(DropdownWidget);\n    expect(wrapper.exists()).toBe(false);\n  });\n\n  it('uses trace specific label', () => {\n    const TraceDataSelector = connectTraceToPlot(DataSelector);\n    const wrapper = render(\n      {},\n      <TraceDataSelector traceIndexes={[0]} label={{pie: 'hodor', '*': 'rodoh'}} attr=\"x\" />\n    );\n    expect(wrapper.find('.field__title-text').text()).toContain('rodoh');\n  });\n});\n"],"file":"DataSelector-test.js"}