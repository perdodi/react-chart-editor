{"version":3,"sources":["../../../../src/components/fields/__tests__/TraceSelector-test.js"],"names":["describe","TraceSection","PlotlySection","it","editorProps","fixtures","scatter","data","mode","xsrc","ysrc","onUpdate","jest","fn","wrapper","plotly","find","TraceSelector","innerDropdown","Dropdown","expect","prop","toEqual","graphDiv","toBe","_fullData","fill","beforeUpdateTraces","type","payload","mock","calls","update","stackgroup"],"mappings":"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","sourcesContent":["/* eslint-disable no-magic-numbers */\nimport Dropdown from '../../widgets/Dropdown';\nimport React from 'react';\nimport TraceSelector from '../TraceSelector';\nimport {PlotlySection} from '../../containers';\nimport {TestEditor, fixtures, plotly, mount} from 'lib/test-utils';\nimport {connectTraceToPlot} from 'lib';\n\ndescribe('TraceSelector', () => {\n  const TraceSection = connectTraceToPlot(PlotlySection);\n\n  it('sets mode to markers if trace scatter, no data or mode provided', () => {\n    const editorProps = {\n      ...fixtures.scatter({data: [{mode: null, xsrc: null, ysrc: null}]}),\n      onUpdate: jest.fn(),\n    };\n\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n    expect(innerDropdown.prop('value')).toEqual('scatter');\n  });\n\n  it('if no data provided, but mode is provided, displays correct trace type', () => {\n    const editorProps = {\n      ...fixtures.scatter({\n        data: [{mode: 'lines+markers', xsrc: null, ysrc: null}],\n      }),\n      onUpdate: jest.fn(),\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n    expect(innerDropdown.prop('value')).toEqual('line');\n  });\n\n  it('if data provided, but no mode is provided, chooses mode according to fullData', () => {\n    const editorProps = {\n      ...fixtures.scatter(),\n      onUpdate: jest.fn(),\n    };\n\n    expect(!editorProps.graphDiv.data[0].mode).toBe(true);\n    expect(editorProps.graphDiv._fullData[0].mode).toBe('lines+markers');\n\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n    expect(innerDropdown.prop('value')).toEqual('line');\n  });\n\n  it('interprets scatter + fill as type=area', () => {\n    const editorProps = {\n      ...fixtures.scatter({data: [{fill: 'tonexty'}]}),\n      onUpdate: jest.fn(),\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n\n    expect(innerDropdown.prop('value')).toEqual('area');\n  });\n\n  it('interprets scatter + mode=lines as type=line', () => {\n    const editorProps = {\n      ...fixtures.scatter({data: [{mode: 'lines'}]}),\n      onUpdate: jest.fn(),\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n\n    expect(innerDropdown.prop('value')).toEqual('line');\n  });\n\n  it('interprets scatter + mode=lines+markers as type=line', () => {\n    const editorProps = {\n      ...fixtures.scatter({data: [{mode: 'lines+markers'}]}),\n      onUpdate: jest.fn(),\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps} plotly={plotly}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n\n    expect(innerDropdown.prop('value')).toEqual('line');\n  });\n\n  it('updates type=scatter mode=lines when type=line', () => {\n    const beforeUpdateTraces = jest.fn();\n    const editorProps = {\n      ...fixtures.scatter({data: [{type: 'scatter', mode: 'markers'}]}),\n      beforeUpdateTraces,\n      plotly,\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n    innerDropdown.prop('onChange')('line');\n\n    const payload = beforeUpdateTraces.mock.calls[0][0];\n    expect(payload.update).toEqual({\n      stackgroup: null,\n      mode: 'lines',\n      type: 'scatter',\n    });\n  });\n\n  it('updates type=scatter stackgroup=1 when type=area', () => {\n    const beforeUpdateTraces = jest.fn();\n    const editorProps = {\n      ...fixtures.scatter({data: [{type: 'scatter', mode: 'markers'}]}),\n      beforeUpdateTraces,\n      plotly,\n    };\n    const wrapper = mount(\n      <TestEditor {...editorProps}>\n        <TraceSection traceIndexes={[0]}>\n          <TraceSelector attr=\"type\" />\n        </TraceSection>\n      </TestEditor>\n    ).find(TraceSelector);\n\n    const innerDropdown = wrapper.find(Dropdown);\n    innerDropdown.prop('onChange')('area');\n\n    const payload = beforeUpdateTraces.mock.calls[0][0];\n    expect(payload.update).toEqual({type: 'scatter', mode: 'lines', stackgroup: 1});\n  });\n});\n"],"file":"TraceSelector-test.js"}