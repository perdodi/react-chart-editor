{"version":3,"sources":["../../../src/components/fields/DataSelector.js"],"names":["attributeIsData","meta","valType","arrayOk","UnconnectedDataSelector","props","context","updatePlot","bind","setLocals","nextProps","nextContext","dataSources","dataSourceOptions","srcAttr","attr","srcProperty","container","get","fullValue","srcConverters","toSrc","type","is2D","includes","Array","isArray","hasData","value","updateContainer","update","data","adjustedValue","length","filter","v","map","fromSrc","label","newLabel","traceType","dataSourceComponents","Component","propTypes","PropTypes","any","func","object","Field","contextTypes","array","shape","isRequired","displayName","modifyPlotProps","plotProps","attrMeta","TRANSFORMS_LIST","indexOf","isVisible"],"mappings":"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","sourcesContent":["import DropdownWidget from '../widgets/Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport Field from './Field';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {connectToContainer, maybeAdjustSrc, maybeTransposeData} from 'lib';\nimport {TRANSFORMS_LIST} from 'lib/constants';\nimport {getColumnNames} from 'lib/dereference';\n\nexport function attributeIsData(meta = {}) {\n  return meta.valType === 'data_array' || meta.arrayOk;\n}\n\nexport class UnconnectedDataSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    this.dataSources = context.dataSources || {};\n    this.dataSourceOptions = context.dataSourceOptions || [];\n\n    this.srcAttr = props.attr + 'src';\n    this.srcProperty = nestedProperty(props.container, this.srcAttr).get();\n    this.fullValue = this.context.srcConverters\n      ? this.context.srcConverters.toSrc(this.srcProperty, props.container.type)\n      : this.srcProperty;\n\n    this.is2D = false;\n    if (props.container) {\n      this.is2D =\n        ((props.attr === 'x' || props.attr === 'y') &&\n          [\n            'scatter',\n            'scattergl',\n            'bar',\n            'funnel',\n            'heatmap',\n            'heatmapgl',\n            'violin',\n            'waterfall',\n            'box',\n            'contour',\n            'contourgl',\n          ].includes(props.container.type)) ||\n        (props.attr === 'z' &&\n          [\n            'contour',\n            'contourgl',\n            'heatmap',\n            'heatmapgl',\n            'surface',\n            'carpet',\n            'contourcarpet',\n          ].includes(props.container.type)) ||\n        (props.container.type === 'table' && props.attr !== 'columnorder') ||\n        Array.isArray(this.fullValue);\n    }\n\n    this.hasData = props.container ? props.attr in props.container : false;\n  }\n\n  updatePlot(value) {\n    if (!this.props.updateContainer) {\n      return;\n    }\n\n    const update = {};\n    let data;\n\n    const adjustedValue =\n      Array.isArray(value) &&\n      value.length === 1 &&\n      (this.props.attr === 'x' || this.props.attr === 'y')\n        ? value[0]\n        : value;\n\n    if (Array.isArray(adjustedValue)) {\n      data = adjustedValue\n        .filter(v => Array.isArray(this.dataSources[v]))\n        .map(v => this.dataSources[v]);\n    } else {\n      data = this.dataSources[adjustedValue] || null;\n    }\n\n    update[this.props.attr] = maybeTransposeData(data, this.srcAttr, this.props.container.type);\n    update[this.srcAttr] = maybeAdjustSrc(adjustedValue, this.srcAttr, this.props.container.type, {\n      fromSrc: this.context.srcConverters ? this.context.srcConverters.fromSrc : null,\n    });\n\n    if (this.props.container.type) {\n      // this means we're at the top level of the trace\n      update['meta.columnNames.' + this.props.attr] = getColumnNames(\n        Array.isArray(adjustedValue) ? adjustedValue : [adjustedValue],\n        this.dataSourceOptions\n      );\n    }\n\n    this.props.updateContainer(update);\n  }\n\n  render() {\n    const {label} = this.props;\n    let newLabel;\n    if (typeof label === 'object') {\n      const traceType = this.props.container.type;\n      if (label[traceType]) {\n        newLabel = label[traceType];\n      } else {\n        newLabel = label['*'];\n      }\n    } else {\n      newLabel = label;\n    }\n\n    return (\n      <Field {...{...this.props, label: newLabel}}>\n        <DropdownWidget\n          options={this.dataSourceOptions}\n          value={this.fullValue}\n          onChange={this.updatePlot}\n          multi={this.is2D}\n          searchable={true}\n          clearable={true}\n          placeholder={this.hasData ? 'Data inlined in figure' : 'Choose data...'}\n          disabled={this.dataSourceOptions.length === 0}\n          components={this.props.dataSourceComponents}\n        />\n      </Field>\n    );\n  }\n}\n\nUnconnectedDataSelector.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  container: PropTypes.object,\n  ...Field.propTypes,\n};\n\nUnconnectedDataSelector.contextTypes = {\n  dataSources: PropTypes.object,\n  dataSourceComponents: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n  srcConverters: PropTypes.shape({\n    toSrc: PropTypes.func.isRequired,\n    fromSrc: PropTypes.func.isRequired,\n  }),\n  container: PropTypes.object,\n};\n\nUnconnectedDataSelector.displayName = 'UnconnectedDataSelector';\n\nfunction modifyPlotProps(props, context, plotProps) {\n  if (\n    attributeIsData(plotProps.attrMeta) &&\n    context.container &&\n    TRANSFORMS_LIST.indexOf(context.container.type) === -1\n  ) {\n    plotProps.isVisible = true;\n  }\n}\n\nexport default connectToContainer(UnconnectedDataSelector, {modifyPlotProps});\n"],"file":"DataSelector.js"}