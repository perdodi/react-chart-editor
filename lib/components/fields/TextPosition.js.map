{"version":3,"sources":["../../../src/components/fields/TextPosition.js"],"names":["UnconnectedTextPosition","props","state","posType","fullValue","_","context","localize","radioOptions","label","value","control","options","setState","updatePlot","updateContainer","textpositionsrc","Component","propTypes","Field","PropTypes","array","oneOfType","string","contextTypes","func","displayName","modifyPlotProps","plotProps","includes","container","type","clearable"],"mappings":"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","sourcesContent":["import Dropdown from './Dropdown';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport Field from './Field';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectToContainer} from 'lib';\nimport Info from './Info';\nimport DataSelector from './DataSelector';\n\nexport class UnconnectedTextPosition extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posType: typeof props.fullValue === 'string' ? 'simple' : 'custom',\n    };\n  }\n\n  render() {\n    const _ = this.context.localize;\n    const radioOptions = [\n      {label: _('All'), value: 'simple'},\n      {label: _('Custom'), value: 'custom'},\n    ];\n    const control =\n      this.state.posType === 'simple' ? (\n        <>\n          <Info>\n            {_(\n              'This will position all text values on the plot according to the selected position.'\n            )}\n          </Info>\n          <Dropdown options={this.props.options} attr=\"textposition\" clearable={false} />\n        </>\n      ) : (\n        <>\n          <Info>\n            <div>\n              {_(\n                'This will position text values individually, according to the provided data positions array. '\n              )}\n            </div>\n          </Info>\n          <DataSelector attr=\"textposition\" />\n          <Info>\n            <div>{_('(\"Top\", \"Middle\", \"Bottom\") + (\"Left\", \"Center\", \"Right\")')}</div>\n          </Info>\n        </>\n      );\n\n    return (\n      <Field {...this.props}>\n        <RadioBlocks\n          options={radioOptions}\n          activeOption={this.state.posType}\n          onOptionChange={value => {\n            this.setState({posType: value});\n            if (value === 'simple') {\n              this.props.updatePlot('middle center');\n            } else {\n              this.props.updateContainer({textpositionsrc: null});\n            }\n          }}\n        />\n        {control}\n      </Field>\n    );\n  }\n}\n\nUnconnectedTextPosition.propTypes = {\n  ...Field.propTypes,\n  options: PropTypes.array,\n  fullValue: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n};\n\nUnconnectedTextPosition.contextTypes = {\n  localize: PropTypes.func,\n};\n\nUnconnectedTextPosition.displayName = 'UnconnectedTextPosition';\n\nexport default connectToContainer(UnconnectedTextPosition, {\n  modifyPlotProps: (props, context, plotProps) => {\n    const {localize: _} = context;\n    let options = [\n      {label: _('Top Left'), value: 'top left'},\n      {label: _('Top Center'), value: 'top center'},\n      {label: _('Top Right'), value: 'top right'},\n      {label: _('Middle Left'), value: 'middle left'},\n      {label: _('Middle Center'), value: 'middle center'},\n      {label: _('Middle Right'), value: 'middle right'},\n      {label: _('Bottom Left'), value: 'bottom left'},\n      {label: _('Bottom Center'), value: 'bottom center'},\n      {label: _('Bottom Right'), value: 'bottom right'},\n    ];\n    if (['pie', 'bar', 'funnel', 'waterfall'].includes(context.container.type)) {\n      options = [\n        {label: _('Inside'), value: 'inside'},\n        {label: _('Outside'), value: 'outside'},\n        {label: _('Auto'), value: 'auto'},\n        {label: _('None'), value: 'none'},\n      ];\n    }\n    if (['funnelarea'].includes(context.container.type)) {\n      options = [\n        {label: _('Inside'), value: 'inside'},\n        {label: _('None'), value: 'none'},\n      ];\n    }\n    plotProps.options = options;\n    plotProps.clearable = false;\n  },\n});\n"],"file":"TextPosition.js"}