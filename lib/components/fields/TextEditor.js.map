{"version":3,"sources":["../../../src/components/fields/TextEditor.js"],"names":["TEMPLATE_STRING_REGEX","INDEX_IN_TEMPLATE_STRING_REGEX","UnconnectedTextEditor","value","match","updatePlot","props","templateStrings","hasTemplateStrings","adjustedValue","replace","index","exec","adjustedIndex","parseInt","isNaN","fullValue","attr","container","htmlOnly","latexOnly","multiValued","richTextOnly","_","context","localize","getAdjustedFullValue","placeholder","editor","bind","Component","propTypes","Field","PropTypes","any","bool","func","string","contextTypes","fullLayout","object","displayName","modifyPlotProps","plotProps","isVisible","_dfltTitle","Object","values","includes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,IAAMA,qBAAqB,GAAG,2BAA9B;AACA,IAAMC,8BAA8B,GAAG,qBAAvC;;IAEaC,qB;;;;;;;;;;;;;uCACQC,K,EAAO;AACxB,UAAI,CAACA,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AACD,aAAOA,KAAK,CAACC,KAAN,CAAYJ,qBAAZ,CAAP;AACD;;;+BAEUG,K,EAAO;AAAA,UACTE,UADS,GACK,KAAKC,KADV,CACTD,UADS;AAEhB,UAAME,eAAe,GAAG,KAAKC,kBAAL,CAAwBL,KAAxB,CAAxB;AAEA,UAAIM,aAAa,GAAGN,KAApB;;AAEA,UAAII,eAAJ,EAAqB;AACnBE,QAAAA,aAAa,GAAGA,aAAa,CAACC,OAAd,CAAsBV,qBAAtB,EAA6C,UAAAI,KAAK,EAAI;AACpE,cAAMO,KAAK,GAAGV,8BAA8B,CAACW,IAA/B,CAAoCR,KAApC,CAAd;;AACA,cAAIO,KAAJ,EAAW;AACT,gBAAME,aAAa,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAA/C;;AACA,gBAAI,CAACI,KAAK,CAACF,aAAD,CAAV,EAA2B;AACzB,sCAAiBA,aAAa,GAAG,CAAhB,GAAoB,CAApB,GAAwBA,aAAzC;AACD;AACF;;AACD,iBAAOT,KAAP;AACD,SATe,CAAhB;AAUD;;AAEDC,MAAAA,UAAU,CAACI,aAAD,CAAV;AACD;;;yCAEoBO,S,EAAW;AAC9B,UAAMT,eAAe,GAAG,KAAKC,kBAAL,CAAwBQ,SAAxB,CAAxB;;AACA,UAAIT,eAAJ,EAAqB;AACnB,eAAOS,SAAS,CAACN,OAAV,CAAkBV,qBAAlB,EAAyC,UAAAI,KAAK,EAAI;AACvD,cAAMO,KAAK,GAAGV,8BAA8B,CAACW,IAA/B,CAAoCR,KAApC,CAAd;;AACA,cAAIO,KAAJ,EAAW;AACT,gBAAME,aAAa,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAA/C;;AACA,gBAAI,CAACI,KAAK,CAACF,aAAD,CAAV,EAA2B;AACzB,sCAAiBA,aAAjB;AACD;;AACD,mBAAOT,KAAP;AACD;;AACD,iBAAOA,KAAP;AACD,SAVM,CAAP;AAWD;;AACD,aAAOY,SAAP;AACD;;;6BAEQ;AAAA,wBACmE,KAAKV,KADxE;AAAA,UACAW,IADA,eACAA,IADA;AAAA,UACMC,SADN,eACMA,SADN;AAAA,UACiBC,QADjB,eACiBA,QADjB;AAAA,UAC2BC,SAD3B,eAC2BA,SAD3B;AAAA,UACsCC,WADtC,eACsCA,WADtC;AAAA,UACmDC,YADnD,eACmDA,YADnD;AAAA,UAGUC,CAHV,GAGe,KAAKC,OAHpB,CAGAC,QAHA;AAKP,UAAIT,SAAS,GAAG,KAAKU,oBAAL,CAA0B,KAAKpB,KAAL,CAAWU,SAArC,CAAhB;AAEA,UAAIW,WAAW,GAAG,KAAKrB,KAAL,CAAWqB,WAA7B;;AAEA,UAAIN,WAAW,IAAKL,SAAS,KAAK,CAACE,SAAD,IAAc,CAAC,8BAAeA,SAAf,EAA0BD,IAA1B,CAApB,CAA7B,EAAoF;AAClFU,QAAAA,WAAW,GAAGX,SAAd;AACAA,QAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,UAAIY,MAAJ;;AAEA,UAAIR,SAAJ,EAAe;AACbO,QAAAA,WAAW,GAAGJ,CAAC,CAAC,4BAAD,CAAf;AACAK,QAAAA,MAAM,GACJ,6BAAC,cAAD;AAAO,UAAA,KAAK,EAAEZ,SAAd;AAAyB,UAAA,WAAW,EAAEW,WAAtC;AAAmD,UAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBwB,IAAhB,CAAqB,IAArB;AAA7D,UADF;AAGD,OALD,MAKO,IAAIP,YAAJ,EAAkB;AACvBM,QAAAA,MAAM,GACJ,6BAAC,iBAAD;AACE,UAAA,KAAK,EAAEZ,SADT;AAEE,UAAA,WAAW,EAAEW,WAFf;AAGE,UAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBwB,IAAhB,CAAqB,IAArB;AAHZ,UADF;AAOD,OARM,MAQA,IAAIV,QAAJ,EAAc;AACnBQ,QAAAA,WAAW,GAAGJ,CAAC,CAAC,2BAAD,CAAf;AACAK,QAAAA,MAAM,GACJ,6BAAC,aAAD;AAAM,UAAA,KAAK,EAAEZ,SAAb;AAAwB,UAAA,WAAW,EAAEW,WAArC;AAAkD,UAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBwB,IAAhB,CAAqB,IAArB;AAA5D,UADF;AAGD,OALM,MAKA;AACLD,QAAAA,MAAM,GACJ,6BAAC,oBAAD;AACE,UAAA,KAAK,EAAEZ,SADT;AAEE,UAAA,WAAW,EAAEW,WAFf;AAGE,UAAA,QAAQ,EAAE,KAAKtB,UAAL,CAAgBwB,IAAhB,CAAqB,IAArB;AAHZ,UADF;AAOD;;AAED,aACE,6BAAC,cAAD,EAAW,KAAKvB,KAAhB,EACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAA8BsB,MAA9B,CADF,CADF;AAKD;;;;EAjGwCE,gB;;;AAoG3C5B,qBAAqB,CAAC6B,SAAtB,qBACKC,eAAMD,SADX;AAEEf,EAAAA,SAAS,EAAEiB,mBAAUC,GAFvB;AAGEf,EAAAA,QAAQ,EAAEc,mBAAUE,IAHtB;AAIEf,EAAAA,SAAS,EAAEa,mBAAUE,IAJvB;AAKEb,EAAAA,YAAY,EAAEW,mBAAUE,IAL1B;AAME9B,EAAAA,UAAU,EAAE4B,mBAAUG,IANxB;AAOET,EAAAA,WAAW,EAAEM,mBAAUI;AAPzB;AAUAnC,qBAAqB,CAACoC,YAAtB,GAAqC;AACnCb,EAAAA,QAAQ,EAAEQ,mBAAUG,IADe;AAEnCG,EAAAA,UAAU,EAAEN,mBAAUO;AAFa,CAArC;AAKAtC,qBAAqB,CAACuC,WAAtB,GAAoC,uBAApC;;eAEe,6BAAmBvC,qBAAnB,EAA0C;AACvDwC,EAAAA,eAAe,EAAE,yBAACpC,KAAD,EAAQkB,OAAR,EAAiBmB,SAAjB,EAA+B;AAC9C,QAAIA,SAAS,CAACC,SAAV,IAAuBD,SAAS,CAACtB,WAArC,EAAkD;AAChDsB,MAAAA,SAAS,CAACC,SAAV,GAAsB,KAAtB;AACD;;AAED,QACEpB,OAAO,CAACe,UAAR,IACAf,OAAO,CAACe,UAAR,CAAmBM,UADnB,IAEAC,MAAM,CAACC,MAAP,CAAcvB,OAAO,CAACe,UAAR,CAAmBM,UAAjC,EAA6CG,QAA7C,CAAsDL,SAAS,CAAC3B,SAAhE,CAHF,EAIE;AACA2B,MAAAA,SAAS,CAAChB,WAAV,GAAwBgB,SAAS,CAAC3B,SAAlC;AACA2B,MAAAA,SAAS,CAAC3B,SAAV,GAAsB,EAAtB;AACD;AACF;AAdsD,CAA1C,C","sourcesContent":["import Field from './Field';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connectToContainer} from 'lib';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport LaTeX from '../widgets/text_editors/LaTeX';\nimport RichText from '../widgets/text_editors/RichText';\nimport MultiFormat from '../widgets/text_editors/MultiFormat';\nimport HTML from '../widgets/text_editors/HTML';\n\n// TODO: import plotly.js regex directly: https://github.com/plotly/plotly.js/issues/3520\nconst TEMPLATE_STRING_REGEX = /%{([^\\s%{}:]*)(:[^}]*)?}/g;\nconst INDEX_IN_TEMPLATE_STRING_REGEX = /%{(meta(\\[(\\d+)]))}/;\n\nexport class UnconnectedTextEditor extends Component {\n  hasTemplateStrings(value) {\n    if (!value) {\n      return false;\n    }\n    return value.match(TEMPLATE_STRING_REGEX);\n  }\n\n  updatePlot(value) {\n    const {updatePlot} = this.props;\n    const templateStrings = this.hasTemplateStrings(value);\n\n    let adjustedValue = value;\n\n    if (templateStrings) {\n      adjustedValue = adjustedValue.replace(TEMPLATE_STRING_REGEX, match => {\n        const index = INDEX_IN_TEMPLATE_STRING_REGEX.exec(match);\n        if (index) {\n          const adjustedIndex = parseInt(index[3], 10) - 1;\n          if (!isNaN(adjustedIndex)) {\n            return `%{meta[${adjustedIndex < 0 ? 0 : adjustedIndex}]}`;\n          }\n        }\n        return match;\n      });\n    }\n\n    updatePlot(adjustedValue);\n  }\n\n  getAdjustedFullValue(fullValue) {\n    const templateStrings = this.hasTemplateStrings(fullValue);\n    if (templateStrings) {\n      return fullValue.replace(TEMPLATE_STRING_REGEX, match => {\n        const index = INDEX_IN_TEMPLATE_STRING_REGEX.exec(match);\n        if (index) {\n          const adjustedIndex = parseInt(index[3], 10) + 1;\n          if (!isNaN(adjustedIndex)) {\n            return `%{meta[${adjustedIndex}]}`;\n          }\n          return match;\n        }\n        return match;\n      });\n    }\n    return fullValue;\n  }\n\n  render() {\n    const {attr, container, htmlOnly, latexOnly, multiValued, richTextOnly} = this.props;\n\n    const {localize: _} = this.context;\n\n    let fullValue = this.getAdjustedFullValue(this.props.fullValue);\n\n    let placeholder = this.props.placeholder;\n\n    if (multiValued || (fullValue && (!container || !nestedProperty(container, attr)))) {\n      placeholder = fullValue;\n      fullValue = '';\n    }\n\n    let editor;\n\n    if (latexOnly) {\n      placeholder = _('Enter LaTeX formatted text');\n      editor = (\n        <LaTeX value={fullValue} placeholder={placeholder} onChange={this.updatePlot.bind(this)} />\n      );\n    } else if (richTextOnly) {\n      editor = (\n        <RichText\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={this.updatePlot.bind(this)}\n        />\n      );\n    } else if (htmlOnly) {\n      placeholder = _('Enter html formatted text');\n      editor = (\n        <HTML value={fullValue} placeholder={placeholder} onChange={this.updatePlot.bind(this)} />\n      );\n    } else {\n      editor = (\n        <MultiFormat\n          value={fullValue}\n          placeholder={placeholder}\n          onChange={this.updatePlot.bind(this)}\n        />\n      );\n    }\n\n    return (\n      <Field {...this.props}>\n        <div className=\"text-editor\">{editor}</div>\n      </Field>\n    );\n  }\n}\n\nUnconnectedTextEditor.propTypes = {\n  ...Field.propTypes,\n  fullValue: PropTypes.any,\n  htmlOnly: PropTypes.bool,\n  latexOnly: PropTypes.bool,\n  richTextOnly: PropTypes.bool,\n  updatePlot: PropTypes.func,\n  placeholder: PropTypes.string,\n};\n\nUnconnectedTextEditor.contextTypes = {\n  localize: PropTypes.func,\n  fullLayout: PropTypes.object,\n};\n\nUnconnectedTextEditor.displayName = 'UnconnectedTextEditor';\n\nexport default connectToContainer(UnconnectedTextEditor, {\n  modifyPlotProps: (props, context, plotProps) => {\n    if (plotProps.isVisible && plotProps.multiValued) {\n      plotProps.isVisible = false;\n    }\n\n    if (\n      context.fullLayout &&\n      context.fullLayout._dfltTitle &&\n      Object.values(context.fullLayout._dfltTitle).includes(plotProps.fullValue)\n    ) {\n      plotProps.placeholder = plotProps.fullValue;\n      plotProps.fullValue = '';\n    }\n  },\n});\n"],"file":"TextEditor.js"}