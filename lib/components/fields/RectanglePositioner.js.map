{"version":3,"sources":["../../../src/components/fields/RectanglePositioner.js"],"names":["maxWidth","gridRes","UnconnectedRectanglePositioner","props","context","sendUpdate","bind","attr","cartesian","x","y","state","snap","width","height","fieldWidthPx","fieldHeightPx","x0","x1","y0","y1","v","Math","round","payload","updateContainer","_","localize","fullContainer","fullLayout","plotWidthPx","plotHeightPx","xaxis","domain","yaxis","aspectRatio","min","left","top","zoomable","overlaying","marginRight","setState","label","value","Array","fill","map","i","borderBottom","borderRight","style","deltaX","deltaY","Component","propTypes","fullValue","PropTypes","any","updatePlot","func","bool","Field","contextTypes","object","displayName"],"mappings":"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","sourcesContent":["import Field from './Field';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectToContainer} from 'lib';\nimport ResizableRect from 'react-resizable-rotatable-draggable';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport DualNumeric from './DualNumeric';\n\nconst maxWidth = 276;\nconst gridRes = 8;\n\nclass UnconnectedRectanglePositioner extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.sendUpdate = this.sendUpdate.bind(this);\n    this.attr = this.props.cartesian\n      ? {\n          x: ['xaxis.domain[0]', 'xaxis.domain[1]'],\n          y: ['yaxis.domain[0]', 'yaxis.domain[1]'],\n        }\n      : {x: ['domain.x[0]', 'domain.x[1]'], y: ['domain.y[0]', 'domain.y[1]']};\n    this.state = {snap: true};\n  }\n\n  sendUpdate({x, y, width, height, fieldWidthPx, fieldHeightPx}) {\n    const x0 = x / fieldWidthPx;\n    const x1 = (width + x) / fieldWidthPx;\n    const y0 = (fieldHeightPx - (height + y)) / fieldHeightPx;\n    const y1 = (fieldHeightPx - y) / fieldHeightPx;\n\n    const snap = this.state.snap ? v => Math.round(v * gridRes) / gridRes : v => v;\n\n    const payload = {};\n\n    if (x0 >= 0 && x1 <= 1) {\n      payload[this.attr.x[0]] = snap(x0);\n      payload[this.attr.x[1]] = snap(x1);\n    }\n\n    if (y0 >= 0 && y1 <= 1) {\n      payload[this.attr.y[0]] = snap(y0);\n      payload[this.attr.y[1]] = snap(y1);\n    }\n\n    this.context.updateContainer(payload);\n  }\n\n  render() {\n    const {attr, cartesian} = this.props;\n    const {\n      localize: _,\n      fullContainer,\n      fullLayout: {width: plotWidthPx, height: plotHeightPx},\n    } = this.context;\n    const x = cartesian ? fullContainer.xaxis.domain : fullContainer.domain.x;\n    const y = cartesian ? fullContainer.yaxis.domain : fullContainer.domain.y;\n    const aspectRatio = plotHeightPx / plotWidthPx;\n    const fieldWidthPx = Math.min(maxWidth, maxWidth / aspectRatio);\n    const fieldHeightPx = Math.min(maxWidth, maxWidth * aspectRatio);\n\n    const width = fieldWidthPx * (x[1] - x[0]);\n    const height = fieldHeightPx * (y[1] - y[0]);\n    const left = fieldWidthPx * x[0];\n    const top = fieldHeightPx * (1 - y[1]);\n\n    let zoomable = '';\n    if (\n      !fullContainer.xaxis ||\n      !fullContainer.yaxis ||\n      (!fullContainer.xaxis.overlaying && !fullContainer.yaxis.overlaying)\n    ) {\n      zoomable = 'n, w, s, e, nw, ne, se, sw';\n    } else if (!fullContainer.xaxis.overlaying) {\n      zoomable = 'e, w';\n    } else if (!fullContainer.yaxis.overlaying) {\n      zoomable = 'n, s';\n    }\n\n    return (\n      <div style={{marginRight: 25}}>\n        <Field {...this.props} attr={attr}>\n          <Field label={_('Snap to Grid')}>\n            <RadioBlocks\n              alignment=\"center\"\n              onOptionChange={snap => this.setState({snap: snap})}\n              activeOption={this.state.snap}\n              options={[\n                {label: _('On'), value: true},\n                {label: _('Off'), value: false},\n              ]}\n            />\n          </Field>\n          <div\n            className=\"rect-container\"\n            style={{\n              width: fieldWidthPx + 1,\n              height: fieldHeightPx + 1,\n            }}\n          >\n            {Array(gridRes * gridRes)\n              .fill(0)\n              .map((v, i) => (\n                <div\n                  key={i}\n                  className=\"rect-grid\"\n                  style={{\n                    width: fieldWidthPx / gridRes - 1,\n                    height: fieldHeightPx / gridRes - 1,\n                    borderBottom: i < gridRes * (gridRes - 1) ? '0' : '1px solid ',\n                    borderRight: (i + 1) % gridRes ? '0' : '1px solid',\n                  }}\n                />\n              ))}\n            <ResizableRect\n              bounds=\"parent\"\n              width={width}\n              height={height}\n              left={left}\n              top={top}\n              rotatable={false}\n              draggable={!this.state.snap}\n              zoomable={zoomable}\n              onResize={style => {\n                this.sendUpdate({\n                  fieldWidthPx,\n                  fieldHeightPx,\n                  width: style.width,\n                  height: style.height,\n                  x: style.left,\n                  y: style.top,\n                });\n              }}\n              onDrag={(deltaX, deltaY) => {\n                this.sendUpdate({\n                  fieldWidthPx,\n                  fieldHeightPx,\n                  width,\n                  height,\n                  x: left + deltaX,\n                  y: top + deltaY,\n                });\n              }}\n            />\n          </div>\n          {fullContainer.xaxis && fullContainer.xaxis.overlaying ? (\n            ''\n          ) : (\n            <DualNumeric\n              label={_('X')}\n              attr={this.attr.x[0]}\n              attr2={this.attr.x[1]}\n              percentage\n              step={1}\n              min={0}\n              max={100}\n            />\n          )}\n          {fullContainer.yaxis && fullContainer.yaxis.overlaying ? (\n            ''\n          ) : (\n            <DualNumeric\n              label={_('Y')}\n              attr={this.attr.y[0]}\n              attr2={this.attr.y[1]}\n              percentage\n              step={1}\n              min={0}\n              max={100}\n            />\n          )}\n        </Field>\n      </div>\n    );\n  }\n}\n\nUnconnectedRectanglePositioner.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  cartesian: PropTypes.bool,\n  ...Field.propTypes,\n};\n\nUnconnectedRectanglePositioner.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  fullContainer: PropTypes.object,\n  fullLayout: PropTypes.object,\n};\n\nUnconnectedRectanglePositioner.displayName = 'UnconnectedRectanglePositioner';\n\nexport default connectToContainer(UnconnectedRectanglePositioner);\n"],"file":"RectanglePositioner.js"}