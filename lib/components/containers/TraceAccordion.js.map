{"version":3,"sources":["../../../src/components/containers/TraceAccordion.js"],"names":["TraceFold","PlotlyFold","TraceAccordion","props","context","setLocals","nextProps","nextContext","base","canGroup","fullData","data","traceFilterCondition","filteredTracesDataIndexes","filteredTraces","length","filter","t","i","fullTrace","tr","index","trace","push","_","localize","dataArrayPositionsByTraceType","fullDataArrayPositionsByTraceType","forEach","traceType","_expandedIndex","Object","keys","map","type","find","value","label","children","d","canAdd","canReorder","addAction","handler","onUpdate","EDITOR_ACTIONS","ADD_TRACE","traceFolds","renderTraceFolds","renderTracePanelHelp","renderUngroupedTraceFolds","renderGroupedTraceFolds","Component","contextTypes","PropTypes","array","func","propTypes","bool","node"],"mappings":"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","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport {connectTraceToPlot, plotlyTraceToCustomTrace} from 'lib';\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport {traceTypes} from 'lib/traceTypes';\nimport {PanelMessage} from './PanelEmpty';\n\nconst TraceFold = connectTraceToPlot(PlotlyFold);\n\nclass TraceAccordion extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    const base = props.canGroup ? context.fullData : context.data;\n    const traceFilterCondition = this.props.traceFilterCondition || (() => true);\n\n    this.filteredTracesDataIndexes = [];\n    this.filteredTraces = [];\n\n    if (base && base.length && context.fullData.length) {\n      this.filteredTraces = base.filter((t, i) => {\n        const fullTrace = props.canGroup ? t : context.fullData.filter(tr => tr.index === i)[0];\n\n        if (fullTrace) {\n          const trace = context.data[fullTrace.index];\n          if (traceFilterCondition(trace, fullTrace)) {\n            this.filteredTracesDataIndexes.push(fullTrace.index);\n            return true;\n          }\n        }\n\n        return false;\n      });\n    }\n  }\n\n  renderGroupedTraceFolds() {\n    if (!this.filteredTraces.length || this.filteredTraces.length <= 1) {\n      return null;\n    }\n\n    const {localize: _} = this.context;\n    const dataArrayPositionsByTraceType = {};\n    const fullDataArrayPositionsByTraceType = {};\n\n    this.filteredTraces.forEach(trace => {\n      const traceType = plotlyTraceToCustomTrace(trace);\n      if (!dataArrayPositionsByTraceType[traceType]) {\n        dataArrayPositionsByTraceType[traceType] = [];\n      }\n\n      if (!fullDataArrayPositionsByTraceType[traceType]) {\n        fullDataArrayPositionsByTraceType[traceType] = [];\n      }\n\n      dataArrayPositionsByTraceType[traceType].push(trace.index);\n      // _expandedIndex is the trace's index in the fullData array\n      fullDataArrayPositionsByTraceType[traceType].push(trace._expandedIndex);\n    });\n\n    return Object.keys(fullDataArrayPositionsByTraceType).map((type, index) => (\n      <TraceFold\n        key={index}\n        traceIndexes={dataArrayPositionsByTraceType[type]}\n        name={traceTypes(_).find(t => t.value === type).label}\n        fullDataArrayPosition={fullDataArrayPositionsByTraceType[type]}\n      >\n        {this.props.children}\n      </TraceFold>\n    ));\n  }\n\n  renderUngroupedTraceFolds() {\n    if (this.filteredTraces.length) {\n      return this.filteredTraces.map((d, i) => (\n        <TraceFold\n          key={i}\n          traceIndexes={[d.index]}\n          canDelete={this.props.canAdd}\n          fullDataArrayPosition={[d._expandedIndex]}\n        >\n          {this.props.children}\n        </TraceFold>\n      ));\n    }\n    return null;\n  }\n\n  renderTraceFolds() {\n    if (this.filteredTraces.length) {\n      return this.filteredTraces.map((d, i) => (\n        <TraceFold\n          key={i}\n          traceIndexes={[this.filteredTracesDataIndexes[i]]}\n          canDelete={this.props.canAdd}\n        >\n          {this.props.children}\n        </TraceFold>\n      ));\n    }\n    return null;\n  }\n\n  renderTracePanelHelp() {\n    const _ = this.context.localize;\n    return (\n      <PanelMessage heading={_('Trace your data.')}>\n        <p>\n          {_('Traces of various types like bar and line are the building blocks of your figure.')}\n        </p>\n        <p>\n          {_(\n            'You can add as many as you like, mixing and matching types and arranging them into subplots.'\n          )}\n        </p>\n        <p>{_('Click on the + button above to add a trace.')}</p>\n      </PanelMessage>\n    );\n  }\n\n  render() {\n    const {canAdd, canGroup, canReorder} = this.props;\n    const _ = this.context.localize;\n\n    if (canAdd) {\n      const addAction = {\n        label: _('Trace'),\n        handler: ({onUpdate}) => {\n          if (onUpdate) {\n            onUpdate({\n              type: EDITOR_ACTIONS.ADD_TRACE,\n            });\n          }\n        },\n      };\n      const traceFolds = this.renderTraceFolds();\n      return (\n        <PlotlyPanel addAction={addAction} canReorder={canReorder}>\n          {traceFolds ? traceFolds : this.renderTracePanelHelp()}\n        </PlotlyPanel>\n      );\n    }\n\n    if (canGroup) {\n      if (this.filteredTraces.length === 1) {\n        return <TraceRequiredPanel>{this.renderUngroupedTraceFolds()}</TraceRequiredPanel>;\n      }\n\n      if (this.filteredTraces.length > 1) {\n        return (\n          <TraceRequiredPanel noPadding>\n            <Tabs>\n              <TabList>\n                <Tab>{_('Individually')}</Tab>\n                <Tab>{_('By Type')}</Tab>\n              </TabList>\n              <TabPanel>\n                <PlotlyPanel>{this.renderUngroupedTraceFolds()}</PlotlyPanel>\n              </TabPanel>\n              <TabPanel>\n                <PlotlyPanel>{this.renderGroupedTraceFolds()}</PlotlyPanel>\n              </TabPanel>\n            </Tabs>\n          </TraceRequiredPanel>\n        );\n      }\n    }\n\n    return <TraceRequiredPanel>{this.renderTraceFolds()}</TraceRequiredPanel>;\n  }\n}\n\nTraceAccordion.contextTypes = {\n  fullData: PropTypes.array,\n  data: PropTypes.array,\n  localize: PropTypes.func,\n};\n\nTraceAccordion.propTypes = {\n  canAdd: PropTypes.bool,\n  canGroup: PropTypes.bool,\n  canReorder: PropTypes.bool,\n  children: PropTypes.node,\n  traceFilterCondition: PropTypes.func,\n};\n\nexport default TraceAccordion;\n"],"file":"TraceAccordion.js"}