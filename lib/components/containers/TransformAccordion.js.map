{"version":3,"sources":["../../../src/components/containers/TransformAccordion.js"],"names":["TransformFold","PlotlyFold","TransformAccordion","context","fullContainer","transforms","_","localize","container","dataSourceOptions","children","props","transformTypes","label","type","transformBy","map","tr","foldNameSuffix","groupssrc","find","d","value","targetsrc","filteredTransforms","filter","Boolean","content","length","i","addActionOptions","some","t","addAction","handler","updateContainer","transformIndex","Array","isArray","key","payload","target","groups","styles","textAlign","Component","contextTypes","PropTypes","object","func","array","propTypes","node"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,kCAAwBC,mBAAxB,CAAtB;;IAEMC,kB;;;;;;;;;;;;;6BACK;AAAA,0BAMH,KAAKC,OANF;AAAA,gDAELC,aAFK,CAEWC,UAFX;AAAA,UAEWA,UAFX,sCAEwB,EAFxB;AAAA,UAGKC,CAHL,iBAGLC,QAHK;AAAA,UAILC,SAJK,iBAILA,SAJK;AAAA,UAKLC,iBALK,iBAKLA,iBALK;AAAA,UAOAC,QAPA,GAOY,KAAKC,KAPjB,CAOAD,QAPA;AASP,UAAME,cAAc,GAAG,CACrB;AAACC,QAAAA,KAAK,EAAEP,CAAC,CAAC,QAAD,CAAT;AAAqBQ,QAAAA,IAAI,EAAE;AAA3B,OADqB,EAErB;AAACD,QAAAA,KAAK,EAAEP,CAAC,CAAC,OAAD,CAAT;AAAoBQ,QAAAA,IAAI,EAAE;AAA1B,OAFqB,EAGrB;AAACD,QAAAA,KAAK,EAAEP,CAAC,CAAC,WAAD,CAAT;AAAwBQ,QAAAA,IAAI,EAAE;AAA9B,OAHqB,EAIrB;AAACD,QAAAA,KAAK,EAAEP,CAAC,CAAC,MAAD,CAAT;AAAmBQ,QAAAA,IAAI,EAAE;AAAzB,OAJqB,CAAvB;AAOA,UAAMC,WAAW,GACfP,SAAS,CAACH,UAAV,IACAG,SAAS,CAACH,UAAV,CAAqBW,GAArB,CAAyB,UAAAC,EAAE,EAAI;AAC7B,YAAIC,cAAc,GAAG,EAArB;;AACA,YAAID,EAAE,CAACE,SAAP,EAAkB;AAChB,cAAMA,SAAS,GACbV,iBAAiB,IAAIA,iBAAiB,CAACW,IAAlB,CAAuB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,KAAF,KAAYL,EAAE,CAACE,SAAnB;AAAA,WAAxB,CADvB;AAEAD,UAAAA,cAAc,eAAQC,SAAS,IAAIA,SAAS,CAACN,KAAvB,GAA+BM,SAAS,CAACN,KAAzC,GAAiDI,EAAE,CAACE,SAA5D,CAAd;AACD,SAJD,MAIO,IAAIF,EAAE,CAACM,SAAP,EAAkB;AACvB,cAAMA,SAAS,GACbd,iBAAiB,IAAIA,iBAAiB,CAACW,IAAlB,CAAuB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,KAAF,KAAYL,EAAE,CAACM,SAAnB;AAAA,WAAxB,CADvB;AAEAL,UAAAA,cAAc,eAAQK,SAAS,IAAIA,SAAS,CAACV,KAAvB,GAA+BU,SAAS,CAACV,KAAzC,GAAiDI,EAAE,CAACM,SAA5D,CAAd;AACD;;AACD,eAAOL,cAAP;AACD,OAZD,CAFF;AAgBA,UAAMM,kBAAkB,GAAGnB,UAAU,CAACoB,MAAX,CAAkB;AAAA,YAAEX,IAAF,QAAEA,IAAF;AAAA,eAAYY,OAAO,CAACZ,IAAD,CAAnB;AAAA,OAAlB,CAA3B;AACA,UAAMa,OAAO,GACXH,kBAAkB,CAACI,MAAnB,IACAJ,kBAAkB,CAACR,GAAnB,CAAuB,UAACC,EAAD,EAAKY,CAAL;AAAA,eACrB,6BAAC,aAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,cAAc,EAAEA,CAFlB;AAGE,UAAA,IAAI,YAAKjB,cAAc,CAACa,MAAf,CAAsB;AAAA,gBAAEX,IAAF,SAAEA,IAAF;AAAA,mBAAYA,IAAI,KAAKG,EAAE,CAACH,IAAxB;AAAA,WAAtB,EAAoD,CAApD,EAAuDD,KAA5D,SAAoEE,WAAW,IACjFA,WAAW,CAACc,CAAD,CADT,CAHN;AAKE,UAAA,SAAS,EAAE;AALb,WAOGnB,QAPH,CADqB;AAAA,OAAvB,CAFF,CAjCO,CA+CP;AACA;;AACA,UAAMoB,gBAAgB,GACpBtB,SAAS,CAACH,UAAV,IAAwBG,SAAS,CAACH,UAAV,CAAqB0B,IAArB,CAA0B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAClB,IAAF,KAAW,SAAf;AAAA,OAA3B,CAAxB,GACIF,cAAc,CAACa,MAAf,CAAsB,UAAAO,CAAC;AAAA,eAAIA,CAAC,CAAClB,IAAF,KAAW,SAAf;AAAA,OAAvB,CADJ,GAEIF,cAHN;AAKA,UAAMqB,SAAS,GAAG;AAChBpB,QAAAA,KAAK,EAAEP,CAAC,CAAC,WAAD,CADQ;AAEhB4B,QAAAA,OAAO,EAAEJ,gBAAgB,CAACd,GAAjB,CAAqB,iBAAmB;AAAA,cAAjBH,KAAiB,SAAjBA,KAAiB;AAAA,cAAVC,IAAU,SAAVA,IAAU;AAC/C,iBAAO;AACLD,YAAAA,KAAK,EAALA,KADK;AAELqB,YAAAA,OAAO,EAAE,iBAAA/B,OAAO,EAAI;AAAA,kBACXC,aADW,GACuBD,OADvB,CACXC,aADW;AAAA,kBACI+B,eADJ,GACuBhC,OADvB,CACIgC,eADJ;;AAElB,kBAAIA,eAAJ,EAAqB;AACnB,oBAAMC,cAAc,GAAGC,KAAK,CAACC,OAAN,CAAclC,aAAa,CAACC,UAA5B,IACnBD,aAAa,CAACC,UAAd,CAAyBuB,MADN,GAEnB,CAFJ;AAGA,oBAAMW,GAAG,wBAAiBH,cAAjB,MAAT;AAEA,oBAAMI,OAAO,GAAG;AAAC1B,kBAAAA,IAAI,EAAJA;AAAD,iBAAhB;;AACA,oBAAIA,IAAI,KAAK,QAAb,EAAuB;AACrB0B,kBAAAA,OAAO,CAACC,MAAR,GAAiB,EAAjB;AACAD,kBAAAA,OAAO,CAACjB,SAAR,GAAoB,IAApB;AACD,iBAHD,MAGO,IAAIT,IAAI,KAAK,MAAb,EAAqB;AAC1B0B,kBAAAA,OAAO,CAACrB,SAAR,GAAoB,IAApB;AACAqB,kBAAAA,OAAO,CAACE,MAAR,GAAiB,IAAjB;AACD;;AAED,oBAAI5B,IAAI,KAAK,SAAb,EAAwB;AACtB0B,kBAAAA,OAAO,CAACG,MAAR,GAAiB,EAAjB;AACD;;AAEDR,gBAAAA,eAAe,qBAAGI,GAAH,EAASC,OAAT,EAAf;AACD;AACF;AAzBI,WAAP;AA2BD,SA5BQ;AAFO,OAAlB;AAiCA,aACE,6BAAC,oBAAD;AAAa,QAAA,SAAS,EAAEP;AAAxB,SACGN,OAAO,GACNA,OADM,GAGN,6BAAC,wBAAD;AAAc,QAAA,IAAI,EAAE;AAApB,SACE;AAAK,QAAA,KAAK,EAAE;AAACiB,UAAAA,SAAS,EAAE;AAAZ;AAAZ,SACE,wCACE,6CAAStC,CAAC,CAAC,QAAD,CAAV,CADF,EACiC,GADjC,EAEGA,CAAC,CAAC,wDAAD,CAFJ,CADF,EAKE,wCACE,6CAASA,CAAC,CAAC,OAAD,CAAV,CADF,EACgC,GADhC,EAEGA,CAAC,CACA,yGADA,CAFJ,CALF,EAWE,wCACE,6CAASA,CAAC,CAAC,WAAD,CAAV,CADF,EACoC,GADpC,EAEGA,CAAC,CACA,qGADA,CAFJ,CAXF,EAiBE,wCACE,6CAASA,CAAC,CAAC,MAAD,CAAV,CADF,EAC+B,GAD/B,EAEGA,CAAC,CACA,kGADA,CAFJ,CAjBF,CADF,EAyBE,wCAAIA,CAAC,CAAC,iDAAD,CAAL,CAzBF,CAJJ,CADF;AAmCD;;;;EA3H8BuC,gB;;AA8HjC3C,kBAAkB,CAAC4C,YAAnB,GAAkC;AAChC1C,EAAAA,aAAa,EAAE2C,mBAAUC,MADO;AAEhCzC,EAAAA,QAAQ,EAAEwC,mBAAUE,IAFY;AAGhCzC,EAAAA,SAAS,EAAEuC,mBAAUC,MAHW;AAIhCvC,EAAAA,iBAAiB,EAAEsC,mBAAUG;AAJG,CAAlC;AAOAhD,kBAAkB,CAACiD,SAAnB,GAA+B;AAC7BzC,EAAAA,QAAQ,EAAEqC,mBAAUK;AADS,CAA/B;eAIelD,kB","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectTransformToTrace} from 'lib';\nimport {PanelMessage} from './PanelEmpty';\n\nconst TransformFold = connectTransformToTrace(PlotlyFold);\n\nclass TransformAccordion extends Component {\n  render() {\n    const {\n      fullContainer: {transforms = []},\n      localize: _,\n      container,\n      dataSourceOptions,\n    } = this.context;\n    const {children} = this.props;\n\n    const transformTypes = [\n      {label: _('Filter'), type: 'filter'},\n      {label: _('Split'), type: 'groupby'},\n      {label: _('Aggregate'), type: 'aggregate'},\n      {label: _('Sort'), type: 'sort'},\n    ];\n\n    const transformBy =\n      container.transforms &&\n      container.transforms.map(tr => {\n        let foldNameSuffix = '';\n        if (tr.groupssrc) {\n          const groupssrc =\n            dataSourceOptions && dataSourceOptions.find(d => d.value === tr.groupssrc);\n          foldNameSuffix = `: ${groupssrc && groupssrc.label ? groupssrc.label : tr.groupssrc}`;\n        } else if (tr.targetsrc) {\n          const targetsrc =\n            dataSourceOptions && dataSourceOptions.find(d => d.value === tr.targetsrc);\n          foldNameSuffix = `: ${targetsrc && targetsrc.label ? targetsrc.label : tr.targetsrc}`;\n        }\n        return foldNameSuffix;\n      });\n\n    const filteredTransforms = transforms.filter(({type}) => Boolean(type));\n    const content =\n      filteredTransforms.length &&\n      filteredTransforms.map((tr, i) => (\n        <TransformFold\n          key={i}\n          transformIndex={i}\n          name={`${transformTypes.filter(({type}) => type === tr.type)[0].label}${transformBy &&\n            transformBy[i]}`}\n          canDelete={true}\n        >\n          {children}\n        </TransformFold>\n      ));\n\n    // cannot have 2 Split transforms on one trace:\n    // https://github.com/plotly/plotly.js/issues/1742\n    const addActionOptions =\n      container.transforms && container.transforms.some(t => t.type === 'groupby')\n        ? transformTypes.filter(t => t.type !== 'groupby')\n        : transformTypes;\n\n    const addAction = {\n      label: _('Transform'),\n      handler: addActionOptions.map(({label, type}) => {\n        return {\n          label,\n          handler: context => {\n            const {fullContainer, updateContainer} = context;\n            if (updateContainer) {\n              const transformIndex = Array.isArray(fullContainer.transforms)\n                ? fullContainer.transforms.length\n                : 0;\n              const key = `transforms[${transformIndex}]`;\n\n              const payload = {type};\n              if (type === 'filter') {\n                payload.target = [];\n                payload.targetsrc = null;\n              } else if (type !== 'sort') {\n                payload.groupssrc = null;\n                payload.groups = null;\n              }\n\n              if (type === 'groupby') {\n                payload.styles = [];\n              }\n\n              updateContainer({[key]: payload});\n            }\n          },\n        };\n      }),\n    };\n\n    return (\n      <PlotlyPanel addAction={addAction}>\n        {content ? (\n          content\n        ) : (\n          <PanelMessage icon={null}>\n            <div style={{textAlign: 'left'}}>\n              <p>\n                <strong>{_('Filter')}</strong>{' '}\n                {_(' transforms allow you to filter data out from a trace.')}\n              </p>\n              <p>\n                <strong>{_('Split')}</strong>{' '}\n                {_(\n                  ' transforms allow you to create multiple traces from one source trace, so as to style them differently.'\n                )}\n              </p>\n              <p>\n                <strong>{_('Aggregate')}</strong>{' '}\n                {_(\n                  ' transforms allow you to summarize a trace using an aggregate function like \"average\" or \"minimum\".'\n                )}\n              </p>\n              <p>\n                <strong>{_('Sort')}</strong>{' '}\n                {_(\n                  ' transforms allow you to sort a trace, so as to control marker overlay or line connection order.'\n                )}\n              </p>\n            </div>\n            <p>{_('Click on the + button above to add a transform.')}</p>\n          </PanelMessage>\n        )}\n      </PlotlyPanel>\n    );\n  }\n}\n\nTransformAccordion.contextTypes = {\n  fullContainer: PropTypes.object,\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n};\n\nTransformAccordion.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default TransformAccordion;\n"],"file":"TransformAccordion.js"}