{"version":3,"sources":["../../../src/components/containers/PlotlyFold.js"],"names":["Fold","foldVisible","foldInfo","props","messageIfEmpty","context","deleteContainer","moveContainer","canDelete","children","className","folded","toggleFold","hideHeader","Icon","icon","name","canMoveUp","canMoveDown","contentClass","headerClass","arrowClass","arrowDownIcon","deleteButton","e","stopPropagation","movingControls","Error","foldHeader","foldContent","classes","Component","plotly_editor_traits","foldable","propTypes","PropTypes","bool","node","string","object","func","oneOfType","contextTypes","childContextTypes","PlotlyFold","determineVisibility","nextProps","nextContext","React","Children","forEach","child","attr","plotProps","type","modifyPlotProps","isVisible","no_visibility_forcing","Object","assign","containerConnectedContextTypes"],"mappings":"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","sourcesContent":["import FoldEmpty from './FoldEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport classnames from 'classnames';\nimport {CloseIcon, AngleDownIcon} from 'plotly-icons';\nimport {unpackPlotProps, containerConnectedContextTypes, striptags} from 'lib';\n\nexport class Fold extends Component {\n  constructor() {\n    super();\n    this.foldVisible = true;\n  }\n\n  getChildContext() {\n    return {\n      foldInfo: this.props.foldInfo ? this.props.foldInfo : null,\n    };\n  }\n\n  render() {\n    if (!this.foldVisible && !this.props.messageIfEmpty) {\n      return null;\n    }\n    const {deleteContainer, moveContainer} = this.context;\n    const {\n      canDelete,\n      children,\n      className,\n      folded,\n      foldInfo,\n      toggleFold,\n      hideHeader,\n      icon: Icon,\n      messageIfEmpty,\n      name,\n      canMoveUp,\n      canMoveDown,\n    } = this.props;\n\n    const contentClass = classnames('fold__content', {\n      'fold__content--noheader': hideHeader,\n    });\n\n    const headerClass = classnames('fold__top', {\n      'fold__top--open': !folded,\n    });\n\n    const arrowClass = classnames('fold__top__arrow', {\n      'fold__top__arrow--open': !folded,\n    });\n\n    const arrowDownIcon = (\n      <div className={arrowClass}>\n        <div className=\"fold__top__arrow__wrapper\">\n          <AngleDownIcon />\n        </div>\n      </div>\n    );\n\n    const icon = Icon ? <Icon className=\"fold__top__icon\" /> : null;\n\n    const deleteButton =\n      canDelete && typeof deleteContainer === 'function' ? (\n        <div\n          className=\"fold__top__delete js-fold__delete\"\n          onClick={e => {\n            e.stopPropagation();\n            deleteContainer(foldInfo);\n          }}\n        >\n          <CloseIcon />\n        </div>\n      ) : null;\n\n    const movingControls = (canMoveDown || canMoveUp) && (\n      <div className=\"fold__top__moving-controls\">\n        <span\n          className={`fold__top__moving-controls--up${canMoveUp ? '' : '--disabled'}`}\n          onClick={e => {\n            // prevents fold toggle to happen when clicking on moving arrow controls\n            e.stopPropagation();\n\n            if (canMoveUp) {\n              if (!moveContainer || typeof moveContainer !== 'function') {\n                throw new Error('moveContainer must be a function');\n              }\n              moveContainer('up');\n            }\n          }}\n        >\n          <AngleDownIcon />\n        </span>\n        <span\n          className={`fold__top__moving-controls--down${canMoveDown ? '' : '--disabled'}`}\n          onClick={e => {\n            // prevents fold toggle to happen when clicking on moving arrow controls\n            e.stopPropagation();\n            if (canMoveDown) {\n              if (!moveContainer || typeof moveContainer !== 'function') {\n                throw new Error('moveContainer must be a function');\n              }\n              moveContainer('down');\n            }\n          }}\n        >\n          <AngleDownIcon />\n        </span>\n      </div>\n    );\n\n    const foldHeader = !hideHeader && (\n      <div className={headerClass} onClick={toggleFold}>\n        <div className=\"fold__top__arrow-title\">\n          {arrowDownIcon}\n          {icon}\n          <div className=\"fold__top__title\">{striptags(name)}</div>\n        </div>\n        {movingControls}\n        {deleteButton}\n      </div>\n    );\n\n    let foldContent = null;\n    if (!folded) {\n      if (this.foldVisible) {\n        foldContent = <div className={contentClass}>{children}</div>;\n      } else {\n        foldContent = (\n          <div className={contentClass}>\n            <FoldEmpty icon={Icon} messagePrimary={messageIfEmpty} />\n          </div>\n        );\n      }\n    }\n\n    const classes = className ? ' ' + className : '';\n\n    return (\n      <div className={`fold${classes}`}>\n        {foldHeader}\n        {foldContent}\n      </div>\n    );\n  }\n}\n\nFold.plotly_editor_traits = {foldable: true};\n\nFold.propTypes = {\n  canDelete: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  folded: PropTypes.bool,\n  foldInfo: PropTypes.object,\n  toggleFold: PropTypes.func,\n  hideHeader: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  messageIfEmpty: PropTypes.string,\n  name: PropTypes.string,\n  canMoveUp: PropTypes.bool,\n  canMoveDown: PropTypes.bool,\n};\n\nFold.contextTypes = {\n  deleteContainer: PropTypes.func,\n};\n\nFold.childContextTypes = {\n  foldInfo: PropTypes.object,\n};\n\nclass PlotlyFold extends Fold {\n  constructor(props, context) {\n    super(props, context);\n\n    this.foldVisible = false;\n    this.determineVisibility(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.determineVisibility(nextProps, nextContext);\n  }\n\n  determineVisibility(nextProps, nextContext) {\n    this.foldVisible = false;\n\n    React.Children.forEach(nextProps.children, child => {\n      if (!child || this.foldVisible) {\n        return;\n      }\n\n      if (child.props.attr) {\n        // attr components force fold open if they are visible\n        const plotProps = unpackPlotProps(child.props, nextContext);\n        if (child.type.modifyPlotProps) {\n          child.type.modifyPlotProps(child.props, nextContext, plotProps);\n        }\n\n        this.foldVisible = this.foldVisible || plotProps.isVisible;\n        return;\n      }\n\n      if (!(child.type.plotly_editor_traits || {}).no_visibility_forcing) {\n        // non-attr components force visibility (unless they don't via traits)\n        this.foldVisible = true;\n        return;\n      }\n    });\n  }\n}\n\nPlotlyFold.plotly_editor_traits = {\n  foldable: true,\n};\n\nPlotlyFold.contextTypes = Object.assign(\n  {\n    deleteContainer: PropTypes.func,\n    moveContainer: PropTypes.func,\n  },\n  containerConnectedContextTypes\n);\n\nexport default PlotlyFold;\n"],"file":"PlotlyFold.js"}