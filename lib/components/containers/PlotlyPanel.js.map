{"version":3,"sources":["../../../src/components/containers/PlotlyPanel.js"],"names":["PanelErrorImpl","_","context","localize","EmbedIconIcon","Component","contextTypes","PropTypes","func","PanelError","Panel","props","state","individualFoldStates","hasError","toggleFolds","bind","toggleFold","deleteContainer","deleteAction","setState","hasOpen","length","some","s","map","index","$toggle","numFolds","React","Children","forEach","children","child","type","plotly_editor_traits","foldable","newFoldStates","Array","fill","collapseByDefault","addAction","e","i","calculateFolds","canReorder","newChildren","key","folded","canMoveUp","canMoveDown","noPadding","showExpandCollapse","propTypes","object","node","bool","defaultProps","childContextTypes","PlotlyPanel","no_visibility_forcing"],"mappings":"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","sourcesContent":["import PanelHeader from './PanelHeader';\nimport PanelEmpty from './PanelEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component, cloneElement} from 'react';\nimport update from 'immutability-helper';\nimport {bem} from 'lib';\nimport {EmbedIconIcon} from 'plotly-icons';\n\nclass PanelErrorImpl extends Component {\n  render() {\n    const {localize: _} = this.context;\n\n    return (\n      <PanelEmpty icon={EmbedIconIcon} heading={_('Well this is embarrassing.')}>\n        <p>{_('This panel could not be displayed due to an error.')}</p>\n      </PanelEmpty>\n    );\n  }\n}\n\nPanelErrorImpl.contextTypes = {\n  localize: PropTypes.func,\n};\n\nconst PanelError = PanelErrorImpl;\n\nexport class Panel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      individualFoldStates: [],\n      hasError: false,\n    };\n    this.toggleFolds = this.toggleFolds.bind(this);\n    this.toggleFold = this.toggleFold.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      deleteContainer: this.props.deleteAction ? this.props.deleteAction : null,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({hasError: true});\n  }\n\n  toggleFolds() {\n    const {individualFoldStates} = this.state;\n    const hasOpen = individualFoldStates.length > 0 && individualFoldStates.some(s => s !== true);\n    this.setState({\n      individualFoldStates: individualFoldStates.map(() => hasOpen),\n    });\n  }\n\n  toggleFold(index) {\n    this.setState(update(this.state, {individualFoldStates: {$toggle: [index]}}));\n  }\n\n  calculateFolds() {\n    // to get proper number of child folds and initialize component state\n    let numFolds = 0;\n\n    React.Children.forEach(this.props.children, child => {\n      if (((child && child.type && child.type.plotly_editor_traits) || {}).foldable) {\n        numFolds++;\n      }\n    });\n\n    if (this.state.individualFoldStates.length !== numFolds) {\n      const newFoldStates = new Array(numFolds).fill(this.props.collapseByDefault);\n      this.setState({\n        individualFoldStates: this.props.addAction\n          ? newFoldStates.map((e, i) => i !== numFolds - 1)\n          : newFoldStates,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.calculateFolds();\n  }\n  componentDidMount() {\n    this.calculateFolds();\n  }\n\n  render() {\n    const {individualFoldStates, hasError} = this.state;\n    const {canReorder} = this.props;\n\n    if (hasError) {\n      return <PanelError />;\n    }\n\n    const newChildren = React.Children.map(this.props.children, (child, index) => {\n      if (((child && child.type && child.type.plotly_editor_traits) || {}).foldable) {\n        return cloneElement(child, {\n          key: index,\n          folded: individualFoldStates[index] || false,\n          toggleFold: () => this.toggleFold(index),\n          canMoveUp: canReorder && individualFoldStates.length > 1 && index > 0,\n          canMoveDown:\n            canReorder &&\n            individualFoldStates.length > 1 &&\n            index !== individualFoldStates.length - 1,\n        });\n      }\n      return child;\n    });\n\n    return (\n      <div className={`panel${this.props.noPadding ? ' panel--no-padding' : ''}`}>\n        <PanelHeader\n          addAction={this.props.addAction}\n          allowCollapse={this.props.showExpandCollapse && individualFoldStates.length > 1}\n          toggleFolds={this.toggleFolds}\n          hasOpen={individualFoldStates.some(s => s === false)}\n        />\n        <div className={bem('panel', 'content')}>{newChildren}</div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  addAction: PropTypes.object,\n  children: PropTypes.node,\n  deleteAction: PropTypes.func,\n  noPadding: PropTypes.bool,\n  showExpandCollapse: PropTypes.bool,\n  collapseByDefault: PropTypes.bool,\n  canReorder: PropTypes.bool,\n};\n\nPanel.defaultProps = {\n  showExpandCollapse: true,\n  collapseByDefault: true,\n};\n\nPanel.contextTypes = {\n  localize: PropTypes.func,\n};\n\nPanel.childContextTypes = {\n  deleteContainer: PropTypes.func,\n};\n\nclass PlotlyPanel extends Panel {}\n\nPlotlyPanel.plotly_editor_traits = {\n  no_visibility_forcing: true,\n};\n\nexport default PlotlyPanel;\n"],"file":"PlotlyPanel.js"}