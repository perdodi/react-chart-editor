{"version":3,"sources":["../../../src/components/containers/RangeSelectorAccordion.js"],"names":["RangeSelectorFold","PlotlyFold","RangeSelectorAccordion","context","fullContainer","rangeselector","visible","_axisGroup","buttons","_","localize","meta","layout","children","props","content","length","map","btn","i","label","addAction","handler","updateContainer","rangeselectorIndex","Array","isArray","Component","contextTypes","PropTypes","object","func","propTypes","node","plotly_editor_traits","no_visibility_forcing"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,qCAA2BC,mBAA3B,CAA1B;;IAEMC,sB;;;;;;;;;;;;;6BACK;AACP,UACE,CAAC,KAAKC,OAAL,CAAaC,aAAd,IACA,CAAC,KAAKD,OAAL,CAAaC,aAAb,CAA2BC,aAD5B,IAEA,CAAC,KAAKF,OAAL,CAAaC,aAAb,CAA2BC,aAA3B,CAAyCC,OAF1C,IAGA;AACA,WAAKH,OAAL,CAAaC,aAAb,CAA2BG,UAA3B,KAA0C,CAL5C,EAME;AACA,eAAO,IAAP;AACD;;AATM,0BAiBH,KAAKJ,OAjBF;AAAA,gDAYLC,aAZK,CAaHC,aAbG,CAaaG,OAbb;AAAA,UAaaA,OAbb,sCAauB,EAbvB;AAAA,UAeKC,CAfL,iBAeLC,QAfK;AAAA,UAgBGC,IAhBH,iBAgBLC,MAhBK;AAAA,UAkBAC,QAlBA,GAkBY,KAAKC,KAlBjB,CAkBAD,QAlBA;AAoBP,UAAME,OAAO,GACXP,OAAO,CAACQ,MAAR,IACAR,OAAO,CAACS,GAAR,CAAY,UAACC,GAAD,EAAMC,CAAN;AAAA,eACV,6BAAC,iBAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,kBAAkB,EAAEA,CAFtB;AAGE,UAAA,IAAI,EAAE,kCAAwBD,GAAG,CAACE,KAA5B,EAAmC;AAACT,YAAAA,IAAI,EAAJA;AAAD,WAAnC,CAHR;AAIE,UAAA,SAAS,EAAE;AAJb,WAMGE,QANH,CADU;AAAA,OAAZ,CAFF;AAaA,UAAMQ,SAAS,GAAG;AAChBD,QAAAA,KAAK,EAAEX,CAAC,CAAC,QAAD,CADQ;AAEhBa,QAAAA,OAAO,EAAE,iBAAAnB,OAAO,EAAI;AAAA,cACXC,aADW,GACuBD,OADvB,CACXC,aADW;AAAA,cACImB,eADJ,GACuBpB,OADvB,CACIoB,eADJ;;AAElB,cAAIA,eAAJ,EAAqB;AACnB,gBAAMC,kBAAkB,GAAGC,KAAK,CAACC,OAAN,CAActB,aAAa,CAACC,aAAd,CAA4BG,OAA1C,IACvBJ,aAAa,CAACC,aAAd,CAA4BG,OAA5B,CAAoCQ,MADb,GAEvB,CAFJ;AAIAO,YAAAA,eAAe,qDACaC,kBADb,QACqC,EADrC,EAAf;AAGD;AACF;AAbe,OAAlB;AAgBA,aAAO,6BAAC,oBAAD;AAAa,QAAA,SAAS,EAAEH;AAAxB,SAAoCN,OAAO,GAAGA,OAAH,GAAa,IAAxD,CAAP;AACD;;;;EAnDkCY,gB;;AAsDrCzB,sBAAsB,CAAC0B,YAAvB,GAAsC;AACpCxB,EAAAA,aAAa,EAAEyB,mBAAUC,MADW;AAEpCpB,EAAAA,QAAQ,EAAEmB,mBAAUE,IAFgB;AAGpCnB,EAAAA,MAAM,EAAEiB,mBAAUC;AAHkB,CAAtC;AAMA5B,sBAAsB,CAAC8B,SAAvB,GAAmC;AACjCnB,EAAAA,QAAQ,EAAEgB,mBAAUI;AADa,CAAnC;AAIA/B,sBAAsB,CAACgC,oBAAvB,GAA8C;AAC5CC,EAAAA,qBAAqB,EAAE;AADqB,CAA9C;eAIejC,sB","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectRangeSelectorToAxis, getParsedTemplateString} from 'lib';\n\nconst RangeSelectorFold = connectRangeSelectorToAxis(PlotlyFold);\n\nclass RangeSelectorAccordion extends Component {\n  render() {\n    if (\n      !this.context.fullContainer ||\n      !this.context.fullContainer.rangeselector ||\n      !this.context.fullContainer.rangeselector.visible ||\n      // next line checks for \"all\" case\n      this.context.fullContainer._axisGroup === 0\n    ) {\n      return null;\n    }\n\n    const {\n      fullContainer: {\n        rangeselector: {buttons = []},\n      },\n      localize: _,\n      layout: meta,\n    } = this.context;\n    const {children} = this.props;\n\n    const content =\n      buttons.length &&\n      buttons.map((btn, i) => (\n        <RangeSelectorFold\n          key={i}\n          rangeselectorIndex={i}\n          name={getParsedTemplateString(btn.label, {meta})}\n          canDelete={true}\n        >\n          {children}\n        </RangeSelectorFold>\n      ));\n\n    const addAction = {\n      label: _('Button'),\n      handler: context => {\n        const {fullContainer, updateContainer} = context;\n        if (updateContainer) {\n          const rangeselectorIndex = Array.isArray(fullContainer.rangeselector.buttons)\n            ? fullContainer.rangeselector.buttons.length\n            : 0;\n\n          updateContainer({\n            [`rangeselector.buttons[${rangeselectorIndex}]`]: {},\n          });\n        }\n      },\n    };\n\n    return <PlotlyPanel addAction={addAction}>{content ? content : null}</PlotlyPanel>;\n  }\n}\n\nRangeSelectorAccordion.contextTypes = {\n  fullContainer: PropTypes.object,\n  localize: PropTypes.func,\n  layout: PropTypes.object,\n};\n\nRangeSelectorAccordion.propTypes = {\n  children: PropTypes.node,\n};\n\nRangeSelectorAccordion.plotly_editor_traits = {\n  no_visibility_forcing: true,\n};\n\nexport default RangeSelectorAccordion;\n"],"file":"RangeSelectorAccordion.js"}