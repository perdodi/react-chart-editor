{"version":3,"sources":["../../../../src/components/containers/__tests__/PlotlySection-test.js"],"names":["TraceSection","PlotlySection","describe","it","wrapper","jest","fn","fixtures","scatter","label","value","find","expect","children","length","toBe","text","Numeric","exists","Info","TraceTypeSection","Flaglist"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlotlySection from '../PlotlySection';\nimport {TraceTypeSection} from '../derived';\nimport {Flaglist, Info, Numeric} from '../../fields';\nimport {TestEditor, fixtures} from 'lib/test-utils';\nimport {connectTraceToPlot} from 'lib';\nimport {mount} from 'enzyme';\n\nconst TraceSection = connectTraceToPlot(PlotlySection);\n\ndescribe('PlotlySection', () => {\n  it('is visible if it contains any visible children', () => {\n    // mode is visible with scatter. Hole is not visible. PlotlySection should show.\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <TraceSection name=\"test-section\" traceIndexes={[0]}>\n          <Flaglist\n            attr=\"mode\"\n            options={[\n              {label: 'Lines', value: 'lines'},\n              {label: 'Points', value: 'markers'},\n            ]}\n          />\n          <Numeric attr=\"hole\" min={0} max={1} step={0.1} />\n        </TraceSection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.children().length).toBe(1);\n  });\n\n  it('is visible if it contains any non attr children', () => {\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <PlotlySection name=\"test-section\">\n          <div className=\"extra\">special extra</div>\n        </PlotlySection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.children().length).toBe(1);\n    expect(wrapper.find('.extra').text()).toBe('special extra');\n  });\n\n  it('is not visible if it contains no visible children', () => {\n    // pull and hole are not scatter attrs. PlotlySection should not show.\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <TraceSection name=\"test-section\" traceIndexes={[0]}>\n          <Numeric attr=\"pull\" min={0} max={1} step={0.1} traceIndexes={[0]} />\n          <Numeric attr=\"hole\" min={0} max={1} step={0.1} traceIndexes={[0]} />\n        </TraceSection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.find(Numeric).exists()).toBe(false);\n  });\n\n  it('will hide with Info children when attrs not defined', () => {\n    const TraceSection = connectTraceToPlot(PlotlySection);\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <TraceSection name=\"test-section\" traceIndexes={[0]}>\n          <Numeric attr=\"badattr\" traceIndexes={[0]} />\n          <Info>INFO</Info>\n        </TraceSection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.find(Info).length).toBe(0);\n  });\n});\n\ndescribe('TraceTypeSection', () => {\n  it('will show when the type is right', () => {\n    const TraceSection = connectTraceToPlot(TraceTypeSection);\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <TraceSection name=\"test-section\" traceIndexes={[0]} traceTypes={['scatter']}>\n          <Flaglist\n            attr=\"mode\"\n            options={[\n              {label: 'Lines', value: 'lines'},\n              {label: 'Points', value: 'markers'},\n            ]}\n          />\n        </TraceSection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.find(Flaglist).length).toBe(1);\n  });\n\n  it('will hide when the type is wrong', () => {\n    const TraceSection = connectTraceToPlot(TraceTypeSection);\n    const wrapper = mount(\n      <TestEditor onUpdate={jest.fn()} {...fixtures.scatter()}>\n        <TraceSection name=\"test-section\" traceIndexes={[0]} traceTypes={['heatmap']}>\n          <Flaglist\n            attr=\"mode\"\n            options={[\n              {label: 'Lines', value: 'lines'},\n              {label: 'Points', value: 'markers'},\n            ]}\n          />\n        </TraceSection>\n      </TestEditor>\n    ).find(PlotlySection);\n\n    expect(wrapper.find(Flaglist).length).toBe(0);\n  });\n});\n"],"file":"PlotlySection-test.js"}