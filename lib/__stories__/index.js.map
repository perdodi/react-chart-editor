{"version":3,"sources":["../../src/__stories__/index.js"],"names":["customConfigTest","visibility_rules","blacklist","type","regex_match","exceptions","panelsToTest","bar","box","pie","histogram","histogram2d","violin","waterfall","sunburst","sankey","geoTest","funnel","funnelarea","window","URL","createObjectURL","panelFixture","Panel","group","name","figure","customConfig","gd","plotly","_context","setPlotConfig","setBackground","fixtures","scatter","dataSources","dataSourceOptions","stories","module","Object","keys","mocks","forEach","m","selectedPanels","panels","p","words","split","panelGroup","panelName","slice","join","add"],"mappings":"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","sourcesContent":["import {TestEditor, setupGraphDiv, fixtures} from 'lib/test-utils';\nimport plotly from 'plotly.js/dist/plotly';\n\nimport {PanelMenuWrapper} from '../components';\n\nimport * as mocks from '../../dev/percy';\nimport * as panels from '../default_panels/';\n\nimport '../../dev/styles.css';\nimport '../styles/main.scss';\nimport './stories.css';\n\nimport React from 'react';\nimport {storiesOf} from '@storybook/react';\nexport const customConfigTest = {\n  visibility_rules: {\n    blacklist: [\n      {type: 'attrName', regex_match: 'font.family'},\n      {type: 'attrName', regex_match: 'font.size'},\n      {\n        type: 'attrName',\n        regex_match: 'color',\n        exceptions: [\n          {\n            type: 'attrName',\n            regex_match: 'colorbar',\n            exceptions: [\n              {type: 'attrName', regex_match: 'colorbar.bgcolor'},\n              {type: 'attrName', regex_match: 'colorbar.tickfont.color'},\n              {type: 'attrName', regex_match: 'colorbar.title.font.color'},\n              {type: 'attrName', regex_match: 'colorbar.outlinecolor'},\n              {type: 'attrName', regex_match: 'colorbar.bordercolor'},\n              {type: 'attrName', regex_match: 'colorbar.tickcolor'},\n            ],\n          },\n          {\n            type: 'attrName',\n            regex_match: 'coloraxis',\n            exceptions: [\n              {type: 'attrName', regex_match: 'coloraxis.colorscale'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.outlinecolor'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.bordercolor'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.bgcolor'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.tickcolor'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.tickfont.color'},\n              {type: 'attrName', regex_match: 'coloraxis.colorbar.title.font.color'},\n            ],\n          },\n          {\n            type: 'attrName',\n            regex_match: 'colorscales',\n            exceptions: [\n              {\n                type: 'attrName',\n                regex_match: 'colorscales.items.concentrationscales.colorscale',\n              },\n            ],\n          },\n          {type: 'attrName', regex_match: 'autocolorscale'},\n          {type: 'attrName', regex_match: 'usecolormap'},\n          {type: 'attrName', regex_match: 'bundlecolors'},\n          {\n            type: 'attrName',\n            regex_match: 'marker.color',\n            exceptions: [\n              {type: 'controlType', regex_match: '^UnconnectedMultiColorPicker$'},\n              {type: 'controlType', regex_match: '^UnconnectedColorscalePicker$'},\n              {type: 'attrName', regex_match: 'marker.colorbar.outlinecolor'},\n              {type: 'attrName', regex_match: 'marker.colorbar.bordercolor'},\n              {type: 'attrName', regex_match: 'marker.colorbar.bgcolor'},\n              {type: 'attrName', regex_match: 'marker.colorbar.tickcolor'},\n              {type: 'attrName', regex_match: 'marker.colorbar.tickfont.color'},\n              {type: 'attrName', regex_match: 'marker.colorbar.title.font.color'},\n            ],\n          },\n        ],\n      },\n    ],\n  },\n};\n\n/**\n * To add more Percy tests - add a mock file to /dev/percy, add it to /dev/percy/index.js\n * To specify which panels to test with the mock, add entry to panelsToTest, else all panels will be tested\n */\nconst panelsToTest = {\n  bar: ['GraphCreatePanel', 'StyleTracesPanel'],\n  box: ['GraphCreatePanel', 'StyleTracesPanel'],\n  pie: ['GraphCreatePanel', 'StyleTracesPanel'],\n  histogram: ['GraphCreatePanel', 'StyleTracesPanel'],\n  histogram2d: ['GraphCreatePanel', 'StyleTracesPanel'],\n  violin: ['GraphCreatePanel', 'StyleTracesPanel'],\n  waterfall: ['GraphCreatePanel', 'StyleTracesPanel'],\n  sunburst: ['GraphCreatePanel', 'StyleTracesPanel'],\n  sankey: ['GraphCreatePanel', 'StyleTracesPanel'],\n  geoTest: ['GraphCreatePanel', 'StyleMapsPanel', 'StyleTracesPanel'],\n  funnel: ['GraphCreatePanel', 'StyleTracesPanel'],\n  funnelarea: ['GraphCreatePanel', 'StyleTracesPanel'],\n};\n\nwindow.URL.createObjectURL = function() {\n  return null;\n};\n\nconst panelFixture = (Panel, group, name, figure, customConfig) => {\n  const gd = setupGraphDiv(figure, plotly);\n  gd._context = plotly.setPlotConfig();\n  gd._context.setBackground = () => {\n    return null;\n  };\n\n  return (\n    <div className=\"plotly_editor\">\n      <TestEditor\n        plotly={plotly}\n        graphDiv={gd}\n        dataSources={fixtures.scatter().dataSources}\n        dataSourceOptions={fixtures.scatter().dataSourceOptions}\n        customConfig={customConfig || {}}\n      >\n        <PanelMenuWrapper>\n          <Panel group={group} name={name} />\n        </PanelMenuWrapper>\n      </TestEditor>\n    </div>\n  );\n};\n\nlet stories = storiesOf('Panels', module);\n\nObject.keys(mocks).forEach(m => {\n  const selectedPanels = panelsToTest[m] ? panelsToTest[m] : Object.keys(panels);\n\n  selectedPanels.forEach(p => {\n    const words = p.split(/(?=[A-Z])/);\n    const panelGroup = words[0];\n    const panelName = words.slice(1, -1).join(' ');\n\n    stories = stories\n      .add(`${m}_${p}`, () => panelFixture(panels[p], panelGroup, panelName, mocks[m]))\n      .add(`${m}_${p}_withCustomConfig`, () =>\n        panelFixture(panels[p], panelGroup, panelName, mocks[m], customConfigTest)\n      );\n  });\n});\n"],"file":"index.js"}